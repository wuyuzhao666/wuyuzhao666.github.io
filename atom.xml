<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>0xCAFEBABE的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wuyuzhao666.github.io/"/>
  <updated>2019-03-14T00:55:01.329Z</updated>
  <id>http://wuyuzhao666.github.io/</id>
  
  <author>
    <name>Wu yuzhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>类加载机制（二）：类的初始化</title>
    <link href="http://wuyuzhao666.github.io/2019/03/13/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E7%B1%BB%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E7%B1%BB%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>http://wuyuzhao666.github.io/2019/03/13/类加载机制（二）：类的初始化/类加载机制（二）：类的初始化/</id>
    <published>2019-03-13T10:49:55.000Z</published>
    <updated>2019-03-14T00:55:01.329Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a>类的初始化</h2><h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>一般<code>Java</code>程序的<code>class</code>文件经过加载、连接后，就进入初始化阶段，顺序执行<code>static</code>语句，为静态变量赋予正确的值，执行<code>static</code>代码块，初始化类。</p><h4 id="类的使用方式"><a href="#类的使用方式" class="headerlink" title="类的使用方式"></a>类的使用方式</h4><p><code>Java</code>程序对类的使用分为两种：</p><p>—-主动使用</p><p>—-被动使用</p><p>所有的<code>Java</code>虚拟机实现必须在每个类或接口被<code>Java</code>程序<em>首次主动使用</em>时才会初始化它们。</p><h5 id="主动使用方式"><a href="#主动使用方式" class="headerlink" title="主动使用方式"></a>主动使用方式</h5><p>主动使用分为七种：</p><p>—-创建类的实例</p><p>—-访问某个类或接口的静态变量，或者对该静态变量赋值</p><p>—-调用类的静态方法</p><p>—-反射（如<code>Class.forName(com.test.Test)</code>）</p><p>—-初始化一个子类</p><p>—-<code>Java</code>虚拟机启动时被标明为启动类的类</p><p>—-<code>JDK1.7</code>开始提供的动态语言支持：<code>java.lang.invoke.MethodHandle</code>实例的解析结果<code>REF_getStatic,REF_putStatic,REF_invokeStatic</code>句柄对应的类没有初始化，则初始化。</p><p>除了以上七种情况，其他使用<code>Java</code>类的方法都被看作是对类的被动使用，都不会导致类的初始化。</p><h5 id="类的初始化步骤"><a href="#类的初始化步骤" class="headerlink" title="类的初始化步骤"></a>类的初始化步骤</h5><p>对于类来说：</p><blockquote><p>假如这个类还没有被加载和连接，那就先进行加载和连接</p></blockquote><blockquote><p>假如类存在直接父类，并且这个父类还没有被初始化，那就先初始化父类</p></blockquote><blockquote><p>假如类中存在初始化语句，那就一次执行这些初始化语句</p></blockquote><p>对于接口来说：</p><p>当<code>Java</code>虚拟机初始化一个类时，要求它的所有父类都已经被初始化，但是这条规则并不适用于接口。</p><blockquote><p>在初始化一个类时，并不会先初始化它所实现的接口</p><p>在初始化一个接口时，并不会先初始化它的父接口</p></blockquote><p>因此，一个父接口并不会因为它的子接口或者实现类的初始化而初始化。只有当程序首次使用特定接口的静态变量时，才会导致该接口的初始化。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><h5 id="NO-1"><a href="#NO-1" class="headerlink" title="NO.1"></a>NO.1</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Son.str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String str = <span class="string">"parent str"</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"parent static启动"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"son static启动"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><center><img src="http://res.cloudinary.com/cafebabe/mytest1.png"></center><blockquote><p>输出结果显示只有<code>Parent</code>类被加载了。对于静态字段来说，只有直接定义了该字段的类才会被初始化。虽然<code>Son</code>没有被主动使用，但它已经被加载了。类加载器并不需要等到某个类被<em>首次主动使用</em>时再加载它。</p></blockquote><p>将<code>Parent</code>类中的<code>str</code>变量注释掉，添加到<code>Son</code>类中</p><p>输出结果：</p><center><img src="http://res.cloudinary.com/cafebabe/mytest1-2.png"></center><blockquote><p>输出结果显示<code>Parent</code>类与<code>Son</code>类都被初始化了。通过使用<code>Son</code>的静态变量，导致<code>Son</code>的初始化，而当一个类在初始化时，首先要求其父类全部都已经初始化，即导致<code>Parent</code>初始化。</p></blockquote><p>我们还可以从第一段打印类加载信息（通过添加虚拟机参数<code>-XX:+TraceClassLoading</code>）看出，虽然<code>Son</code>没有被主动使用，但它已经被加载了。类加载器并不需要等到某个类被“首次主动使用”时再加载它。</p><h5 id="NO-2"><a href="#NO-2" class="headerlink" title="NO.2"></a>NO.2</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Parent2.str);</span><br><span class="line">        System.out.println(Parent2.bi);</span><br><span class="line">        System.out.println(Parent2.si);</span><br><span class="line">        System.out.println(Parent2.icons_1);</span><br><span class="line">        System.out.println(Parent2.iconst_2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent2</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String str = <span class="string">"Hello Jvm"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> bi = <span class="number">127</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> si = <span class="number">32767</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> icons_1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> iconst_2 = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Parent2 init"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hello Jvm</span><br><span class="line"><span class="number">127</span></span><br><span class="line"><span class="number">32767</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>将<code>Parent</code>的<code>class</code>文件从<code>classPath</code>中删除掉，再运行程序，程序没报错，输出结果一样。</p><blockquote><p>常量的本质含义：常量在编译阶段会存入调用这个常量的常量池中。本质上，调用这个常量并没有直接引用到定义常量的类，因此并不会触发定义常量的类的初始化。如：<code>Paren2</code>中定义的常量被存入到了<code>MyTest2</code>中，之后两个类就没有任何关系了。甚至将<code>Paren2</code>的<code>.class</code>文件删除也没关系。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Parent3.str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent3</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String str = UUID.randomUUID().toString().replace(<span class="string">"-"</span>,<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Paren3 init"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Paren3 init</span><br><span class="line"><span class="number">2</span>b00eb3dbd934bf7ab610407058d276f</span><br></pre></td></tr></table></figure><blockquote><p>输出结果显示<code>Parent3</code>被成功初始化了。而且，删除掉<code>Parent3</code>的<code>class</code>文件，也会报<code>java.lang.NoClassDefFoundError</code>的错误。</p></blockquote><p>在编译期间，对于并不能确定的常量来说，不会被存入到调用类的常量池中。而是在运行期间，主动使用常量的所属类，完成所属类的初始化。</p><h5 id="NO-3"><a href="#NO-3" class="headerlink" title="NO.3"></a>NO.3</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        Parent4 parent4 = new Parent4();</span></span><br><span class="line">        Parent4[] parent4s = <span class="keyword">new</span> Parent4[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span>[] ints = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">        System.out.println(parent4s.getClass());</span><br><span class="line">        System.out.println(parent4s.getClass().getSuperclass());</span><br><span class="line">        System.out.println(<span class="string">"=============="</span>);</span><br><span class="line">        System.out.println(ints.getClass());</span><br><span class="line">        System.out.println(ints.getClass().getSuperclass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent4</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Paren4 init"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class [LclassLoader.Parent4;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br><span class="line"><span class="class"></span>==============</span><br><span class="line">class [I</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br></pre></td></tr></table></figure><blockquote><p>输出结果显示并没有触发<code>Parent</code>的初始化过程，但是却触发了<code>class [LclassLoader.Parent4;</code>的初始化阶段，打印出的这个名称，它直接继承<code>class java.lang.Object</code>，代表了数组的<code>component</code>，即数组的组成元素。</p></blockquote><p>将<code>class</code>文件反编译后，可以看出它的创建动作由助记符<code>newarray</code>触发。</p><center><img src="http://res.cloudinary.com/cafebabe/mytest4.png"></center><p><code>anewarray</code>：表示创建一个引用类型的数组（类、接口、数组），并将其引用值压入栈顶。<br><code>newarray</code>：表示创建一个基本类型的数组（int、char），并将其引用值压入栈顶。</p><h5 id="NO-4"><a href="#NO-4" class="headerlink" title="NO.4"></a>NO.4</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Single instance = Single.getInstance();</span><br><span class="line">        System.out.println(<span class="string">"count1:"</span> + Single.count1);</span><br><span class="line">        System.out.println(<span class="string">"count2:"</span> + Single.count2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count1;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Single single = <span class="keyword">new</span> Single();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;</span><br><span class="line">        count1++;</span><br><span class="line">        count2++;</span><br><span class="line">        System.out.println(<span class="string">"构造方法count1:"</span> + count1);</span><br><span class="line">        System.out.println(<span class="string">"构造方法count2:"</span> + count2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">构造方法count1:<span class="number">1</span></span><br><span class="line">构造方法count2:<span class="number">1</span></span><br><span class="line">count1:<span class="number">1</span></span><br><span class="line">count2:<span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>在<code>MyTest6</code>中调用<code>Single</code>的静态方法，触发<code>Single</code>的初始化阶段。</p><p>—-连接阶段，将静态变量全置为默认值：</p><p><code>count1 = 0</code></p><p><code>count2 = 0</code></p><p><code>single = null</code></p><p>—-初始化阶段，顺序执行静态语句：</p><p>执行到此句时 <code>private static Single single = new Single();</code>,执行<code>Single</code>的构造方法。</p><p><code>count1 = 1</code></p><p><code>count2 = 1</code></p><p>并将其打印，最后再在<code>MyTest6</code>的<code>main</code>方法中调用时，直接从<code>Single</code>的常量池中取出。</p></blockquote><p>修改下<code>Single</code>的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Single single = <span class="keyword">new</span> Single();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;</span><br><span class="line">        count1++;</span><br><span class="line">        count2++;</span><br><span class="line">        System.out.println(<span class="string">"构造方法count1:"</span> + count1);</span><br><span class="line">        System.out.println(<span class="string">"构造方法count2:"</span> + count2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调下顺序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count2 = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">构造方法count1:<span class="number">1</span></span><br><span class="line">构造方法count2:<span class="number">1</span></span><br><span class="line">count1:<span class="number">1</span></span><br><span class="line">count2:<span class="number">0</span></span><br></pre></td></tr></table></figure><p>再修改下<code>Single</code>的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span></span>&#123;</span><br><span class="line">    <span class="comment">//初值赋为1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Single single = <span class="keyword">new</span> Single();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;</span><br><span class="line">        count1++;</span><br><span class="line">        count2++;</span><br><span class="line">        System.out.println(<span class="string">"构造方法count1:"</span> + count1);</span><br><span class="line">        System.out.println(<span class="string">"构造方法count2:"</span> + count2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count2 = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">构造方法count1:<span class="number">2</span></span><br><span class="line">构造方法count2:<span class="number">1</span></span><br><span class="line">count1:<span class="number">2</span></span><br><span class="line">count2:<span class="number">0</span></span><br></pre></td></tr></table></figure><p>经过上面的程序可以看出，静态变量的声明语句，以及静态代码块都被看做类的初始化语句，<code>Java</code>虚拟机会按照初始化语句在类文件中的先后顺序来依次执行它们。</p><h5 id="NO-5"><a href="#NO-5" class="headerlink" title="NO.5"></a>NO.5</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest7</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"MyTest7 invoked"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parent7 parent7;</span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line"><span class="comment">//        parent7 = new Parent7();</span></span><br><span class="line">        Son7 son7 = <span class="keyword">new</span> Son7();</span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line">        System.out.println(Son7.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent7</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Parent7 invoked"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son7</span> <span class="keyword">extends</span> <span class="title">Parent7</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Son7 invoked"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MyTest7 invoked</span><br><span class="line">---------------</span><br><span class="line">Parent7 invoked</span><br><span class="line">Son7 invoked</span><br><span class="line">---------------</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><blockquote><p>输出结果显示：首先使用<code>MyTest7</code>的启动类，导致了<code>MyTest7</code>的初始化，执行了静态代码块；然后声明了一个<code>Parent7</code>的变量，并不会导致<code>Parent7</code>的初始化；最后创建了一个<code>Son7</code>的实例，触发<code>Son7</code>的初始化，触发<code>Parent7</code>的初始化。</p></blockquote><p>将<code>Son7 son7 = new Son7();</code>替换为<code>parent7 = new Parent7();</code></p><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MyTest7 invoked</span><br><span class="line">---------------</span><br><span class="line">Parent7 invoked</span><br><span class="line">---------------</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><blockquote><p>输出结果显示：只有<code>Parent7</code>初始化，而<code>Son7</code>并没有初始化。</p></blockquote><p>上述代码也印证了，在创建实例时以及启动类时，会导致类的初始化；当一个类初始化时，会先初始化它的父类。</p><h5 id="NO-6"><a href="#NO-6" class="headerlink" title="NO.6"></a>NO.6</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest8</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(Son8.a);</span></span><br><span class="line">        Son8.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent8</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Parent8 invoked"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Parent8'doSomething"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son8</span> <span class="keyword">extends</span> <span class="title">Parent8</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Son8 invoked"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Parent8 invoked</span><br><span class="line">Parent8<span class="string">'doSomething</span></span><br></pre></td></tr></table></figure><blockquote><p>输出结果显示：<code>Parent8</code>被初始化了。</p></blockquote><p>调用类的静态方法时，会导致类的初始化。</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>​        类的初始化是类加载过程的最后阶段，在前面的类加载过程中，都是有虚拟机来进行主导和控制（除了用户可以自定义类加载外，请看我后续博客），到了初始化阶段，才真正开始执行<code>Java</code>程序中的字节码。</p><p>​        在连接中的准备阶段，静态变量被赋予了默认值，到了初始化阶段，这些变量才被赋予真正的值。在对类进行初始化时，<code>Java</code>虚拟机会按照初始化语句在类文件中的先后顺序来一次执行它们。</p><p>​        一个类只有在被<em>首次主动使用</em>才会触发初始化阶段，也只有上文提到的七种方式才算主动使用，其他都是被动使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;类的初始化&quot;&gt;&lt;a href=&quot;#类的初始化&quot; class=&quot;headerlink&quot; title=&quot;类的初始化&quot;&gt;&lt;/a&gt;类的初始化&lt;/h2&gt;&lt;h4 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://wuyuzhao666.github.io/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="类加载机制" scheme="http://wuyuzhao666.github.io/tags/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    
      <category term="类的初始化" scheme="http://wuyuzhao666.github.io/tags/%E7%B1%BB%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>类加载机制（一）：简述类加载过程</title>
    <link href="http://wuyuzhao666.github.io/2019/03/13/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%AE%80%E8%BF%B0%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%AE%80%E8%BF%B0%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/"/>
    <id>http://wuyuzhao666.github.io/2019/03/13/类加载机制（一）：简述类加载过程/类加载机制（一）：简述类加载过程/</id>
    <published>2019-03-13T02:06:10.000Z</published>
    <updated>2019-03-13T10:57:03.236Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类加载机制（一）：简述类加载过程"><a href="#类加载机制（一）：简述类加载过程" class="headerlink" title="类加载机制（一）：简述类加载过程"></a>类加载机制（一）：简述类加载过程</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>Java源文件经过编译之后，生成了一连串的16进制的字节码，即以<code>.class</code>结尾的文件，而这些描述了Java程序各种信息的字节码，还必须要加载到Java虚拟机之后，才能被运行及使用，而加载<code>class</code>文件的过程就是jvm的类加载机制。</p><p><img src="http://res.cloudinary.com/cafebabe/classCode.png"></p><h3 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h3><p>与大多数语言一样，Java类型也需要加载、连接与初始化，而不同的是，在Java代码中，类型的这些过程都是在程序运行期所完成的。这个加载过程分为加载、连接（验证、准备、解析）、初始化,整个过程简单来说：</p><p>加载：查找并加载类的二进制数据，即加载<code>class</code>文件</p><p>连接：    </p><p>—-验证：确保被加载的类的正确性</p><p>—-准备：为类的静态变量分配内存，并将其设置为默认值</p><p>—-解析：将类中的符号引用转换为直接引用</p><p>初始化：顺序执行静态代码，即为类的静态变量赋予正确的初始值以及执行静态代码块</p><center><img src="http://res.cloudinary.com/cafebabe/classLoader2.png"></center><h4 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h4><p>类的加载指的是将类的<code>class</code>文件中的二进制数据从硬盘读取到内存中，将其放置在运行时数据区的方法区（虚拟机规范并未要求，但<code>hotspot</code>虚拟机将其放置在虚拟机中）内，然后在内存中创建唯一一个类的class对象，用以封装类在方法区中的数据结构，无论<code>new</code>出多少个对象，最终对应的<code>class</code>对象只有一个。</p><h5 id="类的加载方式"><a href="#类的加载方式" class="headerlink" title="类的加载方式"></a>类的加载方式</h5><p>加载<code>.class</code>文件的方式</p><p>—-从本地文件系统中加载</p><p>—-通过网络下载<code>.class</code>文件</p><p>—-从jar，war等归档文件中加载<code>.class</code>文件</p><p>—-从专有数据库中提取<code>.class</code>文件</p><p>—-将Java源文件动态编译为<code>.class</code>文件</p><blockquote><p>编写一个MyCat类，添加虚拟机参数-XX:+TraceClassLoading参数，运行代码，可以看出，MyCat类被虚拟机从本地文件系统加载到内存中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; jvm虚拟机参数：都以-XX:开始</span><br><span class="line">&gt; -XX:+&lt;option&gt; 表示开启option选项 ,</span><br><span class="line">&gt; -XX:-&lt;option&gt; 表示关闭option选项，</span><br><span class="line">&gt; -XX:&lt;option&gt;=&lt;value&gt;,表示将option值设置为value</span><br><span class="line">&gt; </span><br><span class="line">&gt; -XX:+TraceClassLoading</span><br><span class="line">&gt; 有时候我们需要监控系统中哪些类被加载进来，什么样的类加载的比较频繁，什么样的类加载的比较少，可以使用这个参数来配置打印出程序执行过程中类的加载信息。</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><center><img src="http://res.cloudinary.com/cafebabe/classLoader3.png"></center></blockquote><h5 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h5><p>类的加载是通过类加载器来加载的，虚拟机中有两种类型的加载器。</p><p><code>Java</code>虚拟机自带的加载器</p><p>—-根类加载器（<code>Bootstrap</code>）</p><p>—-扩展类加载器（<code>Extension</code>）</p><p>—-系统（应用）加载器（<code>System</code>）</p><p>用户自定义的类加载器</p><p>—-<code>java.lang.classLoader</code>的子类</p><p>—-用户可以定制类的加载方式</p><p>后续请看我的关于类加载器的文章</p><h4 id="类的连接"><a href="#类的连接" class="headerlink" title="类的连接"></a>类的连接</h4><p>类被加载后，就进入连接阶段。连接就是将已经加载到内存中的类的二进制数据合并到虚拟机的运行时环境中。</p><h5 id="类的验证"><a href="#类的验证" class="headerlink" title="类的验证"></a>类的验证</h5><p>类的验证的内容</p><p>—-类文件的结构检查</p><p>—-语义检查</p><p>—-字节码验证</p><p>—-二进制兼容性的验证</p><h5 id="类的准备"><a href="#类的准备" class="headerlink" title="类的准备"></a>类的准备</h5><p>将静态变量设置为默认值，而实例变量将会在对象实例化时随着对象一起分配到Java堆中去。</p><h5 id="类的解析"><a href="#类的解析" class="headerlink" title="类的解析"></a>类的解析</h5><p>将类中的符号引用转换为直接引用，（摘自深入理解JAVA虚拟机）。</p><blockquote><p>符号引用：</p><p>符号引用：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能够无歧义的定位到目标即可。在Java中，一个java类将会编译成一个class文件。在编译时，java类并不知道所引用的类的实际地址，因此只能使用符号引用来代替。比如org.simple.People类引用了org.simple.Language类，在编译时People类并不知道Language类的实际内存地址，因此只能使用符号org.simple.Language（假设是这个，当然实际中是由类似于CONSTANT_Class_info的常量来表示的）来表示Language类的地址。各种虚拟机实现的内存布局可能有所不同，但是它们能接受的符号引用都是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。</p><p>直接引用：</p><p>直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局相关的，同一个符号引用在不同的虚拟机实例上翻译出来的直接引用一般不会相同。有了直接引用，那引用的目标必定已经在内存中存在。</p></blockquote><h4 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a>类的初始化</h4><p>到了初始化阶段，才真正开始执行类中定义的<code>Java</code>代码，在初始化阶段，就会为类变量赋予正确的初始值。</p><p>后续请看我的关于类的初始化的文章。</p><p><a href="/2019/03/13/类加载机制（二）：类的初始化/类加载机制（二）：类的初始化/">类加载机制（二）：类的初始化</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;类加载机制（一）：简述类加载过程&quot;&gt;&lt;a href=&quot;#类加载机制（一）：简述类加载过程&quot; class=&quot;headerlink&quot; title=&quot;类加载机制（一）：简述类加载过程&quot;&gt;&lt;/a&gt;类加载机制（一）：简述类加载过程&lt;/h2&gt;&lt;h3 id=&quot;引言&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://wuyuzhao666.github.io/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="类加载机制" scheme="http://wuyuzhao666.github.io/tags/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>HashSet解析</title>
    <link href="http://wuyuzhao666.github.io/2019/03/09/HashSet%E8%A7%A3%E6%9E%90/HashSet%E8%A7%A3%E6%9E%90/"/>
    <id>http://wuyuzhao666.github.io/2019/03/09/HashSet解析/HashSet解析/</id>
    <published>2019-03-09T00:11:42.000Z</published>
    <updated>2019-03-09T00:14:30.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HashSet解析"><a href="#HashSet解析" class="headerlink" title="HashSet解析"></a>HashSet解析</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p> <code>HashSet</code>实现了<code>Set</code>接口，<code>Set</code>表示无重复元素、且不保证访问顺序的容器接口。与<code>HashMap</code>类似，它有如下的构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123; map = <span class="keyword">new</span> HashMap&lt;&gt;();&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;map = <span class="keyword">new</span> HashMap&lt;&gt;(Math.max((<span class="keyword">int</span>) (c.size()/.<span class="number">75f</span>) + <span class="number">1</span>, <span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">  addAll(c);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity, loadFactor);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity);&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>initialCapacity</code>（初始容量，默认16），<code>loadFactor</code>（负载因子，默认0.75）与<code>HashMap</code>中的含义是一样的。</p></blockquote><p><code>HashSet</code>的用法也很简单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">List a= <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">   a.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">   a.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//直接传入个容器类进去</span></span><br><span class="line"></span><br><span class="line">   Set c = <span class="keyword">new</span> HashSet&lt;&gt;(a);</span><br><span class="line"></span><br><span class="line">   Iterator iterator = c.iterator();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">       System.out.println(iterator.next());</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为<code>HashSet</code>中是无重复元素的，所以结果为1。这个特性可以将其用于去重。</p></blockquote><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p><code>HashSet</code>其实就是<code>HashMap</code>实现的，在<code>HashSet</code>内部有个<code>HashMap</code>实例变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br></pre></td></tr></table></figure><p>还有个常量。在Map中有key，有value，而在HashSet中相当于只有key，所有的value都是这个常量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure><p>再来看看add(E e)方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>直接调用<code>HashMap</code>的<code>put</code>方法，将元素作为<code>key</code>，常量<code>PRESENT</code>作为<code>value</code>存入，<code>null</code>值也可以存入，若集合中已有元素，则保持集合不变返回<code>false</code>。</p></blockquote><p>检查也是<code>HashMap</code>的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> map.containsKey(o);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>检查<code>map</code>中是否有对应的key。</p></blockquote><p>删除也是<code>HashMap</code>的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> map.remove(o)==PRESENT;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>删除对应key的节点。</p></blockquote><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p><code>HashSet</code>原理较为简单，实现了<code>Set</code>接口，内部维护了一个<code>HashMap</code>，特点是无重复元素，元素无顺序，可以用于去重，集合运算，若想了解更深层次的，可以看看<code>HashMap</code>的实现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HashSet解析&quot;&gt;&lt;a href=&quot;#HashSet解析&quot; class=&quot;headerlink&quot; title=&quot;HashSet解析&quot;&gt;&lt;/a&gt;HashSet解析&lt;/h2&gt;&lt;h3 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="容器类" scheme="http://wuyuzhao666.github.io/tags/%E5%AE%B9%E5%99%A8%E7%B1%BB/"/>
    
      <category term="HashSet" scheme="http://wuyuzhao666.github.io/tags/HashSet/"/>
    
  </entry>
  
  <entry>
    <title>HashMap解析之hash(key)</title>
    <link href="http://wuyuzhao666.github.io/2019/03/07/HashMap%E8%A7%A3%E6%9E%90%E4%B9%8Bhash(key)/HashMap%E8%A7%A3%E6%9E%90%E4%B9%8Bhash(key)/"/>
    <id>http://wuyuzhao666.github.io/2019/03/07/HashMap解析之hash(key)/HashMap解析之hash(key)/</id>
    <published>2019-03-07T11:44:54.000Z</published>
    <updated>2019-03-08T12:01:04.448Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HashMap解析之hash-key"><a href="#HashMap解析之hash-key" class="headerlink" title="HashMap解析之hash(key)"></a>HashMap解析之hash(key)</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>  <code>HashMap</code>是<code>Map</code>接口的一个实现类，它的实现方式利用了<code>hash</code>，使用了数组链表的形式来存储数据，<code>HashMap</code>内部维护了一个<code>Node&lt;k,v&gt;</code>类型的数组<code>table</code>（哈希表），每个元素<code>table[i]</code>指向一个单向链表，根据键存取值，通过相应的运算得到数组中的索引位置,然后再操作<code>table[i]</code>指向的单向链表。这个数组在初次使用的时候会被初始化，并且，数组长度为2的次方数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure><p>在<code>HashMap</code>中，它是一种数组链表的形式，每个存入的元素被包装成一个<code>Node</code>,<code>Node</code>是一个内部类，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line"></span><br><span class="line">    V value;</span><br><span class="line"></span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.hash = hash;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + value; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        V oldValue = value;</span><br><span class="line"></span><br><span class="line">        value = newValue;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line"></span><br><span class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line"></span><br><span class="line">                Objects.equals(value, e.getValue()))</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在<code>Node</code>中，维护了节点元素、元素的key、key的hash值，以及下一个节点next，这种方式就构成了一个单向链表的形式。</p></blockquote><h3 id="hash（key）"><a href="#hash（key）" class="headerlink" title="hash（key）"></a>hash（key）</h3><p>先来看看put方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算出key的hash值，一起传入</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>方便讲解，直接给出结论。</em></p><p>向<code>HashMap</code>中put、get、remove元素时，是根据节点的<code>key</code>的<code>hash</code>值来对哈希表进行操作的，那是如何通过<code>hash</code>值来进行索引的呢，先看看<code>hash(key)</code>的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由节点的key值计算</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//若key为null，则hash值为0，所以在HashCode中key值可以为空；</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 否则，将key的hashcode值与hashcode的右移16位进行异或</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据hash值取得对应的节点</span></span><br><span class="line"></span><br><span class="line">tab[i = (n - <span class="number">1</span>) &amp; hash]</span><br></pre></td></tr></table></figure><p>计算过程如下：</p><p><img src="http://res.cloudinary.com/cafebabe/image/upload/hash_count.png"></p><blockquote><p>了解了hash值的计算过程以及如何存取节点到数组中后，应该要知道为什么需要这样来建立索引？</p></blockquote><blockquote><p>因为数组索引是由hash值确定的，所以最重要的就是避免hash冲突，即以上的这些对hashCode的操作都是为了避免hash冲突，使节点在数组中分布均匀。</p></blockquote><p>针对这个计算过程，提出三个问题（<a href="https://juejin.im/post/5aa5d8d26fb9a028d2079264" title="Title" target="_blank" rel="noopener">此处参考原PO</a>）</p><p>1.为什么不直接采用经过hashCode（）处理的哈希码作为存储数组table的下标位置？</p><p>2.为什么采用哈希码与运算(&amp;)（数组长度-1）计算数组下标？</p><p>3.为什么在计算数组下标前，需对哈希码进行二次处理：扰动处理？</p><p>第一个问题</p><blockquote><p>因为直接算出来的hashCode值是2进制的32位数，要是直接使用这个数的话，就可能会出现hashCode的值远远大于数组实际元素个数，这样节点分布就会极不均匀，并且也浪费了大量的空间，所以，采用哈希码与运算(&amp;)（数组长度-1）计算数组下标。</p></blockquote><p>第二个问题</p><blockquote><p>1.数组长度-1</p></blockquote><blockquote><p>数组长度=2的幂=（二进制表示）100…00的形式=首位为1、后面均为0。要是直接去&amp;哈希码，会有如下几个后果。</p></blockquote><blockquote><p>（1）算出的下标值就会集中于某几位，这样增大了hash冲突的可能性。</p></blockquote><blockquote><p>（2）数组长度为偶数，最后一位0，&amp;出结果肯定为偶数，这样浪费了一半空间，而且也增大了hash冲突的可能性。</p></blockquote><blockquote><p>(数组长度-1)=（二进制表示）011…11的形式=首位为0、后面均为1。</p></blockquote><blockquote><p>（1）这样&amp;出的结果，就会由hash码的低位来决定，并且最后一位为1，&amp;出的结果是奇数还是偶数，由hash码的最后以为决定。</p></blockquote><blockquote><p>2.&amp;运算</p></blockquote><blockquote><p>hash码与运算数组长度 实际上=将hash值对数组长度取模，减小索引的值。为了提高效率，采用位运算&amp;，只有但数组长度=2的幂次方时，h&amp;(n-1)才等价与h%n。</p></blockquote><p><img src="http://res.cloudinary.com/cafebabe/image/upload/hash_yu.png"></p><blockquote><p>这样做的结果，都是为了让&amp;出的结果，由hash码来控制，能让结果更加的均匀。</p></blockquote><p>第三个问题</p><blockquote><p>因为一般数组长度只会对应hash码的后几位，这样求出的结果也会易造成hash冲突，经过移位运算，得到的hash码更加均匀，提高了数组索引的随机性和均匀性。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HashMap解析之hash-key&quot;&gt;&lt;a href=&quot;#HashMap解析之hash-key&quot; class=&quot;headerlink&quot; title=&quot;HashMap解析之hash(key)&quot;&gt;&lt;/a&gt;HashMap解析之hash(key)&lt;/h2&gt;&lt;h3 id=
      
    
    </summary>
    
      <category term="Java基础" scheme="http://wuyuzhao666.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="容器类" scheme="http://wuyuzhao666.github.io/tags/%E5%AE%B9%E5%99%A8%E7%B1%BB/"/>
    
      <category term="HashMap" scheme="http://wuyuzhao666.github.io/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>LinkedList原理解析</title>
    <link href="http://wuyuzhao666.github.io/2019/03/04/LinkedList%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/LinkedList%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://wuyuzhao666.github.io/2019/03/04/LinkedList原理解析/LinkedList原理解析/</id>
    <published>2019-03-04T07:13:49.000Z</published>
    <updated>2019-03-07T14:07:27.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LinkedList原理解析"><a href="#LinkedList原理解析" class="headerlink" title="LinkedList原理解析"></a>LinkedList原理解析</h2><blockquote><p>在前面我们对<code>ArrayList</code>(See my <a href="/2019/03/02/ArrayList原理解析/ArrayList原理解析/">ArrayList原理解析</a> page for details.)已做了解析，<code>ArrayList</code>操作维护的是内部数组，元素在内存中是连续存放的，可以通过索引直接访问，访问效率高，但是对于删除和移动来说，性能就较低了。而<code>LinkedList</code>呢，顾名思义，它是一个链表，更确切的说，它是一个双向链表，因为<code>LinkedList</code>的元素都是单独存放的，元素之间在逻辑上通过链接连在一起，下面，我们就解析下<code>LinkedList</code>的原理。</p></blockquote><p>在<code>LinkedList</code>中元素以节点（<code>Node</code>）的方式进行存储：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代表本节点元素</span></span><br><span class="line"></span><br><span class="line">    E item;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代表后继元素</span></span><br><span class="line"></span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代表前驱元素</span></span><br><span class="line"></span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在<code>LinkedList</code>中有个内部类<code>Node<e></e></code>,它来表示<code>LinkedList</code>中的元素。而在其内部也保存着当前节点的前驱和后继两个节点。</p></blockquote><p>在<code>LinkedList</code>中维护着三个变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br></pre></td></tr></table></figure><blockquote><p><code>LinkedList</code>的长度，头节点以及尾节点。<code>LinkedList</code>里的操作大都是围绕着这三个变量来进行的。我们先从<code>add</code>方法看起。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    linkLast(e);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>Ladd(E e)</code>方法，将调用<code>linkLast(E e)</code>方法，插入新节点。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    last = newNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">        first = newNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">        l.next = newNode;</span><br><span class="line"></span><br><span class="line">    size++;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第一步：创建新节点，前驱节点指向尾节点，后继节点为空。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><blockquote><p>第二步：令尾节点为这个新建的节点；若原来链表为空，则头节点指向新节点；非空，则尾节点的后继节点指向新节点；链表长度加1；modCount加1，用于迭代时判断链表的结构变化。</p></blockquote><p>这是在链表末尾进行插入，若要指定位置插入呢？再看看另外一个<code>add(int index,E element)</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检查索引值是否满足index &gt;= 0 &amp;&amp; index &lt;= size</span></span><br><span class="line"></span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//若index值与链表长度相同，则插入到链表末尾。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index == size)</span><br><span class="line"></span><br><span class="line">        linkLast(element);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">        linkBefore(element, node(index));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检查完毕，并且想要插入的位置与链表长度包不同，这调用<code>linkBefore</code>方法进行插入。</p><p><em>因为链表无法向数组那样可以直接查找索引，进行插入，所以要根据索引值查找到对应的节点，在这里调用了node方法来查找节点值</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line"></span><br><span class="line">            x = x.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line"></span><br><span class="line">            x = x.prev;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>与链表长度的一半来进行比较，若index小于链表长度的一半，则从头开始；反之，则从尾节点开始。最后返回找到对应索引值的节点。</p></blockquote><p>找到index对应的节点后，就可以插入了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assert succ != null;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, succ);</span><br><span class="line"></span><br><span class="line">    succ.prev = newNode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果index节点为头节点，则新节点为头节点；不然则插入到index节点之前</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">        first = newNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">        pred.next = newNode;</span><br><span class="line"></span><br><span class="line">    size++;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在中间插入，<code>LinkedList</code>只需要分配内存就行，而<code>ArrayList</code>则需要其他空间，还要移动后续的元素。</p></blockquote><p>我们再来看看<code>remove(int index)</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    checkElementIndex(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> unlink(node(index));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>remove(int index)</code>方法同样也需要检查index值，然后找到index值对应的节点，最后调用<code>unlink</code>删除节点后，返回删除的节点。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// assert x != null;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> E element = x.item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">    first = next;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    prev.next = next;</span><br><span class="line"></span><br><span class="line">    x.prev = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">    last = prev;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;j</span><br><span class="line"></span><br><span class="line">    next.prev = prev;</span><br><span class="line"></span><br><span class="line">    x.next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    x.item = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    size--;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>remove(int index)</code>方法的基本思路也很简单：将删除节点<code>x</code>的前驱节点指向<code>x</code>的后继节点，将<code>x</code>的候后继节点的前驱节点指向<code>x</code>的前驱节点。 </p><p>首先，若<code>x</code>的前驱节点为空，即<code>x</code>为头节点，则<code>x</code>的后继自然就是头节点了。</p></blockquote><blockquote><p>然后，若<code>x</code>的后继节点为空，即<code>x</code>为尾节点，则<code>x</code>的前驱自然就是头节点了。</p></blockquote><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>以上，我们介绍了<code>LinkedList</code>的几个方法，其余方法也都类似，就是链表的一些基本操作。<code>LinkedList</code>内部是以node节点的方式来进行维护的，每个节点内部又有前驱和后继节点，这就相当于一个双向链表，并且在内部还维护着头节点、尾节点以及长度。通过这些，可以得出一些关于<code>LinkedList</code>的一些特点：</p><p>(1)<code>LinkedList</code>不需要预先分配空间，按需进行分配;</p><p>(2)进行头、尾的插入很方便;</p><p>(3)按索引插入，时间复杂度较低，为<em>O(N/2)</em>,但插入效率较高，为<em>O(1)</em>;</p><p>(4)查找的话，效率也较低，时间复杂度为<em>O（N）</em>，不管是否已排序；</p><p>(5)在两端进行查找、删除，时间复杂度为<em>O(1)</em>;</p><p>(6)在中间进行查找、删除，需要逐个比对，时间复杂度为<em>O(N)</em>,但修改效率就只有<em>O(1)</em>。</p><p>综上，若进行的操作涉及大量的插入、删除，尤其是在两端的插入、删除，并且查找中间元素的操作较少的话，使用<code>LinkedList</code>是比较好的选择。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;LinkedList原理解析&quot;&gt;&lt;a href=&quot;#LinkedList原理解析&quot; class=&quot;headerlink&quot; title=&quot;LinkedList原理解析&quot;&gt;&lt;/a&gt;LinkedList原理解析&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在前面我们对&lt;co
      
    
    </summary>
    
      <category term="Java基础" scheme="http://wuyuzhao666.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="容器类" scheme="http://wuyuzhao666.github.io/tags/%E5%AE%B9%E5%99%A8%E7%B1%BB/"/>
    
      <category term="LinkedList" scheme="http://wuyuzhao666.github.io/tags/LinkedList/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList原理解析</title>
    <link href="http://wuyuzhao666.github.io/2019/03/02/ArrayList%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/ArrayList%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://wuyuzhao666.github.io/2019/03/02/ArrayList原理解析/ArrayList原理解析/</id>
    <published>2019-03-02T00:37:25.000Z</published>
    <updated>2019-03-07T14:07:13.359Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ArrayList的基本原理"><a href="#ArrayList的基本原理" class="headerlink" title="ArrayList的基本原理"></a>ArrayList的基本原理</h2><blockquote><p><code>ArrayList</code>是我们平时编码经常用到的动态数组容器类，要想分析它的原理，我们先来看看一个简易的DynamicArray类（摘自Java编程的逻辑）</p></blockquote><h3 id="一个简易的动态数组类"><a href="#一个简易的动态数组类" class="headerlink" title="一个简易的动态数组类"></a>一个简易的动态数组类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicArray</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object[] elementData;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Dynamicarray</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[DEFAULT_CAPACITY];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(oldCapacity &gt;= minCapacity)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(newCapacity &lt; minCapacity)&#123;</span><br><span class="line"></span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    elementData = Arrays.copyOf(elementData,newCapacity);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>&#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ensureCapacity(size + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">       elementData[size++] = e;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index,E e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       E e1 = get(index);</span><br><span class="line"></span><br><span class="line">       elementData[index] = e;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> e1;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在这个类中，定义了一个内部数组elementData，数组元素个数size，一个静态常量DEFAULT_CAPACITY,它表示数组的默认空间大小。这个动态数组类的操作基本都是基于内部数组element和size。<code>ensureCapacity</code>方法,在每次做add操作时，都会被调用，它是检查当前数组容量，并增大容量，然后根据新的容量，复制原来数组的。</p></blockquote><h3 id="ArrayList源码解析："><a href="#ArrayList源码解析：" class="headerlink" title="ArrayList源码解析："></a>ArrayList源码解析：</h3><blockquote><p>ArrayList的基本原理与上文中的动态数组类是差不多的，它同样有静态常量默认空间，实例变量内部数组、元素个数。同样，内部方法基本都是操作elementData这个数组，size实时记录着这个数组的大小，首先我们从<code>add</code>方法说起（各源码内注释已说明白，就不再叙述）。</p></blockquote><p>添加方法add(E e)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//首先，调用ensureCapacityInternal方法，确保数组容量够。将当前元素个数加一，即最小容量minCapacity传入方法。</span></span><br><span class="line"></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line"></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检查数组容量方法ensureCapacityInternal(int minCapacity)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果数组为空，则返回默认值与minCapacity之间的最大值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//如果minCapacity大于当前数组的长度，就调用grow方法增大容量,</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        grow(minCapacity);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>modCount++表示内部的修改次数，而这个参数与arrayList的迭代有关,下篇博客再讲解。</p></blockquote><p>增大数组容量grow方法(int minCapacity)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个新的容量newCapacity，它的值为当前容量右移一位，即除以2，再加上当前数组容量，即当前数组容量的1.5倍</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果还小于当前元素个数加一，新的容量就等于minCapacity</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果newCapacity大于一个静态常量MAX_ARRAY_SIZE，就调用hugeCapacity方法，</span></span><br><span class="line"></span><br><span class="line">    将newCapacity设定为Integer包装类的最大值<span class="number">0x7fffffff</span>,其中MAX_ARRAY_SIZE为Integer.MAX_VALUE-<span class="number">8</span>，</span><br><span class="line"></span><br><span class="line">    减<span class="number">8</span>是因为在一些vm中，在数组中会保留一些头信息，尝试分配更大的数组可能导致OutOfMemoryError:</span><br><span class="line"></span><br><span class="line">    请求的数组大小超过VM限制</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//以newCapacity为数组size，创建了一个新的数组，复制原内容，赋值给elementData</span></span><br><span class="line"></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果minCapacity还大于MAX_ARRAY_SIZE，就返回Integer的最大值0x7fffffff</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line"></span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line"></span><br><span class="line">        MAX_ARRAY_SIZE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看看remove(int index)方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   rangeCheck(index);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">modCount++;</span><br><span class="line"></span><br><span class="line">E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算出需要移动多少位</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//移动数组</span></span><br><span class="line"></span><br><span class="line">    System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line"></span><br><span class="line">                     numMoved);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将size减1，GC会回收未经使用的对象</span></span><br><span class="line"></span><br><span class="line">elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里modCount依旧加一。</p></blockquote><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><blockquote><p>上面，我们介绍了<code>ArrayList</code>的<code>add</code>和<code>remove</code>方法，其他方法也都是对内部数组elementData和元素个数size的操作，就不再探究了。总之，<code>ArrayList</code>就是一个动态数组，实现动态的原理，就是对内部的elementData、size和默认空间<code>DEFAULT_CAPACITY</code>进行操作。创建<code>ArrayList</code>时，会默认初始化一个<code>DEFAULT_CAPACITY</code>大小的数组。每次要做增加操作，就进行数组容量检查，若不够，就增加容量，做删除操作，size就减一，保持size实时记录当前元素个数。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ArrayList的基本原理&quot;&gt;&lt;a href=&quot;#ArrayList的基本原理&quot; class=&quot;headerlink&quot; title=&quot;ArrayList的基本原理&quot;&gt;&lt;/a&gt;ArrayList的基本原理&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Arr
      
    
    </summary>
    
      <category term="Java基础" scheme="http://wuyuzhao666.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="容器类" scheme="http://wuyuzhao666.github.io/tags/%E5%AE%B9%E5%99%A8%E7%B1%BB/"/>
    
      <category term="ArrayList" scheme="http://wuyuzhao666.github.io/tags/ArrayList/"/>
    
  </entry>
  
  <entry>
    <title>包装类的缓存机制</title>
    <link href="http://wuyuzhao666.github.io/2019/02/28/%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <id>http://wuyuzhao666.github.io/2019/02/28/包装类的缓存机制/包装类的缓存机制/</id>
    <published>2019-02-28T13:50:12.000Z</published>
    <updated>2019-03-07T14:07:36.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="包装类的缓存机制与valueOf"><a href="#包装类的缓存机制与valueOf" class="headerlink" title="包装类的缓存机制与valueOf()"></a>包装类的缓存机制与valueOf()</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>Java有8种基本类型，每种都有一个包装类型，有很多静态方法、变量等，方便对数据进行操作。包装类可以由<code>valueOf()</code>静态方法去创建，也可以用new关键字去创建实例对象，但为什么推荐使用<code>valueOf()</code>来创建呢。</p><hr><p>首先，我们来看一个例子:</p><pre><code>public class Test {public static void main(String[] args) {    Integer a = 1;    Integer b = 1;    Integer c = 128;    Integer d = 128;    if(a == b){        System.out.println(&quot;a与b相同&quot;);    }    if(c == d){        System.out.println(&quot;c与d相同&quot;);    }}}</code></pre><p><em>运行结果</em>   </p><p>​                                                                                                             </p><p><code>a与b相同                                                                                                      c与d不相同</code></p><p>​                                                                                                         </p><p><em>分析</em></p><blockquote><p> 这段代码创建了4个<code>Integer</code>类型的对象实例a、b、c、d，照常理来说，4个对象，其引用地址不同，此例子的输出应该都为不相同，但结果确是a与b相同，c与d不同，这是为什么？</p></blockquote><p>此处我们是采用自动装箱的方式来创建的<code>Integer</code>对象，而这相当于调用了<code>valueOf()</code>的方法，所以就得从<code>valueOf()</code>这个静态方法说起。</p><p>###valueof的分析</p><p>首先，看看<code>Integer</code>的<code>valueOf()</code>方法的源码</p><pre><code>public static Integer valueOf(int i) {            if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)                return IntegerCache.cache[i + (-IntegerCache.low)];            return new Integer(i);        }</code></pre><p><em>分析</em></p><blockquote><p>此段代码中如果不满足<code>i&gt;=IntegerCache.low &amp;&amp; i&lt;= IntegerCache.high</code>这个表达式，就通过new来得到对象，如果满足呢？</p></blockquote><p>再来看看IntegerCache类，IntegCache类是Integer类的一个内部静态类，其源码如下。</p><pre><code>  /** * Cache to support the object identity semantics of autoboxing for values between * -128 and 127 (inclusive) as required by JLS. * * The cache is initialized on first usage.  The size of the cache * may be controlled by the {@code -XX:AutoBoxCacheMax=&lt;size&gt;} option. * During VM initialization, java.lang.Integer.IntegerCache.high property * may be set and saved in the private system properties in the * sun.misc.VM class. */ private static class IntegerCache {                static final int low = -128;                static final int high;                static final Integer cache[];            static {                // high value may be configured by property                int h = 127;                String integerCacheHighPropValue =                    sun.misc.VM.getSavedProperty(&quot;java.lang.Integer.IntegerCache.high&quot;);                if (integerCacheHighPropValue != null) {                    try {                        int i = parseInt(integerCacheHighPropValue);                        i = Math.max(i, 127);                        // Maximum array size is Integer.MAX_VALUE                        h = Math.min(i, Integer.MAX_VALUE - (-low) -1);                    } catch( NumberFormatException nfe) {                        // If the property cannot be parsed into an int, ignore it.                    }                }                high = h;                cache = new Integer[(high - low) + 1];                int j = low;                for(int k = 0; k &lt; cache.length; k++)                    cache[k] = new Integer(j++);                // range [-128, 127] must be interned (JLS7 5.1.7)                assert IntegerCache.high &gt;= 127;            }            private IntegerCache() {}        }</code></pre><p><em>分析</em></p><blockquote><p>首先，从Javadoc中看出这个类是用来实现缓存的。它定义了三个静态参数，缓存数组<code>cache</code>,数组最小值<code>low</code>，赋值为-128以及数组最大值<code>high</code>，最大值映射到了<code>“java.lang.Integer.IntegerCache.high”</code>上。</p></blockquote><blockquote><p>，并支持 -128 到 127 之间的自动装箱过程。最大值 127 可以通过 JVM 的启动参数 -XX:AutoBoxCacheMax=size 修改。                                                                                                              </p></blockquote><blockquote><p>修改jvm参数后                                                                                                                                                                            </p></blockquote><p>  <img src="/2019/02/28/包装类的缓存机制/包装类的缓存机制/2.png" alt="添加jvm参数">                                                                                                                                 </p><p>​      </p><p><em>运行结果</em></p><p>​                                                                                                       </p><p><code>a与b相同                                                                                                      c与d不相同</code></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p><code>IntegerCache</code>这个<code>Integer</code>私有静态类代表<code>Integer</code>缓存，它在被首次主动使用时，会被初始化，static代码块中的会被执行，通过一个 <code>for</code> 循环创建出一个值为-128~127的一个缓存数组<code>cache</code>，以后，如果创建的值在<code>low</code>和<code>high</code>之间，就可以使用缓存中包含的实例对象，而不是创建一个新的实例(在自动装箱的情况下)。这种机制使我们可以根据应用程序的实际情况灵活地调整来提高性能。是什么原因选择这个 -128 到 127 这个范围呢？因为这个范围的整数值是使用最广泛的，通过使用共享对象，就可以节省内存空间了。在程序中第一次使用 <code>Integer</code> 的时候也需要一定的额外时间来初始化这个缓存。这种机制在其他包装类中也有类似的实现。这种缓存策略也是一种设计模式，叫做享元模式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;包装类的缓存机制与valueOf&quot;&gt;&lt;a href=&quot;#包装类的缓存机制与valueOf&quot; class=&quot;headerlink&quot; title=&quot;包装类的缓存机制与valueOf()&quot;&gt;&lt;/a&gt;包装类的缓存机制与valueOf()&lt;/h2&gt;&lt;h3 id=&quot;引言&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Java基础" scheme="http://wuyuzhao666.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="容器类" scheme="http://wuyuzhao666.github.io/tags/%E5%AE%B9%E5%99%A8%E7%B1%BB/"/>
    
      <category term="缓存机制" scheme="http://wuyuzhao666.github.io/tags/%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
</feed>
