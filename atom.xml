<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>巴斯光甜的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wuyuzhao666.github.io/"/>
  <updated>2019-02-28T13:37:37.865Z</updated>
  <id>http://wuyuzhao666.github.io/</id>
  
  <author>
    <name>Wu yuzhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>包装类的缓存机制与valueOf()</title>
    <link href="http://wuyuzhao666.github.io/2019/02/28/%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E4%B8%8EvalueOf/"/>
    <id>http://wuyuzhao666.github.io/2019/02/28/包装类的缓存机制与valueOf/</id>
    <published>2019-02-28T13:13:32.000Z</published>
    <updated>2019-02-28T13:37:37.865Z</updated>
    
    <content type="html"><![CDATA[<p>##包装类的缓存机制与valueOf()</p><p>###引言<br>Java有8种基本类型，每种都有一个包装类型，有很多静态方法、变量等，方便对数据进行操作。包装类可以由<code>valueOf()</code>静态方法去创建，也可以用new关键字去创建实例对象，但为什么推荐使用<code>valueOf()</code>来创建呢。</p><hr><p>首先，我们来看一个例子:</p><pre><code>public class Test {public static void main(String[] args) {    Integer a = 1;    Integer b = 1;    Integer c = 128;    Integer d = 128;    if(a == b){        System.out.println(&quot;a与b相同&quot;);    }    if(c == d){        System.out.println(&quot;c与d相同&quot;);    }}}</code></pre><p><em>运行结果</em><br>​<br><code>a与b相同                                                                                                      c与d不相同</code><br>​<br><em>分析</em></p><blockquote><p> 这段代码创建了4个<code>Integer</code>类型的对象实例a、b、c、d，照常理来说，4个对象，其引用地址不同，此例子的输出应该都为不相同，但结果确是a与b相同，c与d不同，这是为什么？</p></blockquote><p>此处我们是采用自动装箱的方式来创建的<code>Integer</code>对象，而这相当于调用了<code>valueOf()</code>的方法，所以就得从<code>valueOf()</code>这个静态方法说起。</p><p>###valueof的分析<br>首先，看看<code>Integer</code>的<code>valueOf()</code>方法的源码</p><pre><code>public static Integer valueOf(int i) {            if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)                return IntegerCache.cache[i + (-IntegerCache.low)];            return new Integer(i);        }</code></pre><p><em>分析</em></p><blockquote><p>此段代码中如果不满足<code>i&gt;=IntegerCache.low &amp;&amp; i&lt;= IntegerCache.high</code>这个表达式，就通过new来得到对象，如果满足呢？</p></blockquote><p>再来看看IntegerCache类，IntegCache类是Integer类的一个内部静态类，其源码如下。</p><pre><code>  /** * Cache to support the object identity semantics of autoboxing for values between * -128 and 127 (inclusive) as required by JLS. * * The cache is initialized on first usage.  The size of the cache * may be controlled by the {@code -XX:AutoBoxCacheMax=&lt;size&gt;} option. * During VM initialization, java.lang.Integer.IntegerCache.high property * may be set and saved in the private system properties in the * sun.misc.VM class. */ private static class IntegerCache {                static final int low = -128;                static final int high;                static final Integer cache[];            static {                // high value may be configured by property                int h = 127;                String integerCacheHighPropValue =                    sun.misc.VM.getSavedProperty(&quot;java.lang.Integer.IntegerCache.high&quot;);                if (integerCacheHighPropValue != null) {                    try {                        int i = parseInt(integerCacheHighPropValue);                        i = Math.max(i, 127);                        // Maximum array size is Integer.MAX_VALUE                        h = Math.min(i, Integer.MAX_VALUE - (-low) -1);                    } catch( NumberFormatException nfe) {                        // If the property cannot be parsed into an int, ignore it.                    }                }                high = h;                cache = new Integer[(high - low) + 1];                int j = low;                for(int k = 0; k &lt; cache.length; k++)                    cache[k] = new Integer(j++);                // range [-128, 127] must be interned (JLS7 5.1.7)                assert IntegerCache.high &gt;= 127;            }            private IntegerCache() {}        }</code></pre><p><em>分析</em></p><blockquote><p>首先，从Javadoc中看出这个类是用来实现缓存的。它定义了三个静态参数，缓存数组<code>cache</code>,数组最小值<code>low</code>，赋值为-128以及数组最大值<code>high</code>，最大值映射到了<code>“java.lang.Integer.IntegerCache.high”</code>上。<br>，并支持 -128 到 127 之间的自动装箱过程。最大值 127 可以通过 JVM 的启动参数 -XX:AutoBoxCacheMax=size 修改。<br>修改jvm参数后<br>  <img src="/2.png">                                                                                                                                      </p></blockquote><p><em>运行结果</em><br>​<br><code>a与b相同                                                                                                      c与d不相同</code></p><p>###结论             </p><p>IntegerCache这个<code>Integer</code>私有静态类代表<code>Integer</code>缓存，它在被首次主动使用时，会被初始化，static代码块中的会被执行，通过一个 <code>for</code> 循环创建出一个值为-128~127的一个缓存数组<code>cache</code>，以后，如果创建的值在<code>low</code>和<code>high</code>之间，就可以使用缓存中包含的实例对象，而不是创建一个新的实例(在自动装箱的情况下)。这种机制使我们可以根据应用程序的实际情况灵活地调整来提高性能。是什么原因选择这个 -128 到 127 这个范围呢？因为这个范围的整数值是使用最广泛的，通过使用共享对象，就可以节省内存空间了。在程序中第一次使用 <code>Integer</code> 的时候也需要一定的额外时间来初始化这个缓存。这种机制在其他包装类中也有类似的实现。这种缓存策略也是一种设计模式，叫做享元模式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##包装类的缓存机制与valueOf()&lt;/p&gt;
&lt;p&gt;###引言&lt;br&gt;Java有8种基本类型，每种都有一个包装类型，有很多静态方法、变量等，方便对数据进行操作。包装类可以由&lt;code&gt;valueOf()&lt;/code&gt;静态方法去创建，也可以用new关键字去创建实例对象，但
      
    
    </summary>
    
    
      <category term="Java基础" scheme="http://wuyuzhao666.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>包装类的缓存机制与valueOf()</title>
    <link href="http://wuyuzhao666.github.io/2019/02/28/%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E4%B8%8EvalueOf/%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E4%B8%8EvalueOf/"/>
    <id>http://wuyuzhao666.github.io/2019/02/28/包装类的缓存机制与valueOf/包装类的缓存机制与valueOf/</id>
    <published>2019-02-28T13:13:32.000Z</published>
    <updated>2019-02-28T13:25:15.501Z</updated>
    
    <content type="html"><![CDATA[<p>##包装类的缓存机制与valueOf()</p><p>###引言<br>Java有8种基本类型，每种都有一个包装类型，有很多静态方法、变量等，方便对数据进行操作。包装类可以由<code>valueOf()</code>静态方法去创建，也可以用new关键字去创建实例对象，但为什么推荐使用<code>valueOf()</code>来创建呢。</p><hr><p>首先，我们来看一个例子:</p><pre><code>public class Test {public static void main(String[] args) {    Integer a = 1;    Integer b = 1;    Integer c = 128;    Integer d = 128;    if(a == b){        System.out.println(&quot;a与b相同&quot;);    }    if(c == d){        System.out.println(&quot;c与d相同&quot;);    }}}</code></pre><p><em>运行结果</em>   </p><p><code>a与b相同                                                                                                      c与d不相同</code></p><p><em>分析</em></p><blockquote><p> 这段代码创建了4个<code>Integer</code>类型的对象实例a、b、c、d，照常理来说，4个对象，其引用地址不同，此例子的输出应该都为不相同，但结果确是a与b相同，c与d不同，这是为什么？</p></blockquote><p>此处我们是采用自动装箱的方式来创建的<code>Integer</code>对象，而这相当于调用了<code>valueOf()</code>的方法，所以就得从<code>valueOf()</code>这个静态方法说起。</p><p>###valueof的分析<br>首先，看看<code>Integer</code>的<code>valueOf()</code>方法的源码</p><pre><code>public static Integer valueOf(int i) {            if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)                return IntegerCache.cache[i + (-IntegerCache.low)];            return new Integer(i);        }</code></pre><p><em>分析</em></p><blockquote><p>此段代码中如果不满足<code>i&gt;=IntegerCache.low &amp;&amp; i&lt;= IntegerCache.high</code>这个表达式，就通过new来得到对象，如果满足呢？</p></blockquote><p>再来看看IntegerCache类，IntegCache类是Integer类的一个内部静态类，其源码如下。</p><pre><code>  /** * Cache to support the object identity semantics of autoboxing for values between * -128 and 127 (inclusive) as required by JLS. * * The cache is initialized on first usage.  The size of the cache * may be controlled by the {@code -XX:AutoBoxCacheMax=&lt;size&gt;} option. * During VM initialization, java.lang.Integer.IntegerCache.high property * may be set and saved in the private system properties in the * sun.misc.VM class. */ private static class IntegerCache {                static final int low = -128;                static final int high;                static final Integer cache[];            static {                // high value may be configured by property                int h = 127;                String integerCacheHighPropValue =                    sun.misc.VM.getSavedProperty(&quot;java.lang.Integer.IntegerCache.high&quot;);                if (integerCacheHighPropValue != null) {                    try {                        int i = parseInt(integerCacheHighPropValue);                        i = Math.max(i, 127);                        // Maximum array size is Integer.MAX_VALUE                        h = Math.min(i, Integer.MAX_VALUE - (-low) -1);                    } catch( NumberFormatException nfe) {                        // If the property cannot be parsed into an int, ignore it.                    }                }                high = h;                cache = new Integer[(high - low) + 1];                int j = low;                for(int k = 0; k &lt; cache.length; k++)                    cache[k] = new Integer(j++);                // range [-128, 127] must be interned (JLS7 5.1.7)                assert IntegerCache.high &gt;= 127;            }            private IntegerCache() {}        }</code></pre><p><em>分析</em></p><blockquote><p>首先，从Javadoc中看出这个类是用来实现缓存的。它定义了三个静态参数，缓存数组<code>cache</code>,数组最小值<code>low</code>，赋值为-128以及数组最大值<code>high</code>，最大值映射到了<code>“java.lang.Integer.IntegerCache.high”</code>上。<br>，并支持 -128 到 127 之间的自动装箱过程。最大值 127 可以通过 JVM 的启动参数 -XX:AutoBoxCacheMax=size 修改。<br>修改jvm参数后<br>  <img src="2.png">                                                                                                                                      </p></blockquote><p><em>运行结果</em></p><p><code>a与b相同                                                                                                      c与d不相同</code></p><p>###结论                   </p><h2 id="IntegerCache这个Integer私有静态类代表Integer缓存，它在被首次主动使用时，会被初始化，static代码块中的会被执行，通过一个-for-循环创建出一个值为-128-127的一个缓存数组cache，以后，如果创建的值在low和high之间，就可以使用缓存中包含的实例对象，而不是创建一个新的实例-在自动装箱的情况下-。这种机制使我们可以根据应用程序的实际情况灵活地调整来提高性能。是什么原因选择这个-128-到-127-这个范围呢？因为这个范围的整数值是使用最广泛的，通过使用共享对象，就可以节省内存空间了。在程序中第一次使用-Integer-的时候也需要一定的额外时间来初始化这个缓存。这种机制在其他包装类中也有类似的实现。这种缓存策略也是一种设计模式，叫做享元模式。"><a href="#IntegerCache这个Integer私有静态类代表Integer缓存，它在被首次主动使用时，会被初始化，static代码块中的会被执行，通过一个-for-循环创建出一个值为-128-127的一个缓存数组cache，以后，如果创建的值在low和high之间，就可以使用缓存中包含的实例对象，而不是创建一个新的实例-在自动装箱的情况下-。这种机制使我们可以根据应用程序的实际情况灵活地调整来提高性能。是什么原因选择这个-128-到-127-这个范围呢？因为这个范围的整数值是使用最广泛的，通过使用共享对象，就可以节省内存空间了。在程序中第一次使用-Integer-的时候也需要一定的额外时间来初始化这个缓存。这种机制在其他包装类中也有类似的实现。这种缓存策略也是一种设计模式，叫做享元模式。" class="headerlink" title="IntegerCache这个Integer私有静态类代表Integer缓存，它在被首次主动使用时，会被初始化，static代码块中的会被执行，通过一个 for 循环创建出一个值为-128~127的一个缓存数组cache，以后，如果创建的值在low和high之间，就可以使用缓存中包含的实例对象，而不是创建一个新的实例(在自动装箱的情况下)。这种机制使我们可以根据应用程序的实际情况灵活地调整来提高性能。是什么原因选择这个 -128 到 127 这个范围呢？因为这个范围的整数值是使用最广泛的，通过使用共享对象，就可以节省内存空间了。在程序中第一次使用 Integer 的时候也需要一定的额外时间来初始化这个缓存。这种机制在其他包装类中也有类似的实现。这种缓存策略也是一种设计模式，叫做享元模式。"></a><code>IntegerCache</code>这个<code>Integer</code>私有静态类代表<code>Integer</code>缓存，它在被首次主动使用时，会被初始化，static代码块中的会被执行，通过一个 <code>for</code> 循环创建出一个值为-128~127的一个缓存数组<code>cache</code>，以后，如果创建的值在<code>low</code>和<code>high</code>之间，就可以使用缓存中包含的实例对象，而不是创建一个新的实例(在自动装箱的情况下)。这种机制使我们可以根据应用程序的实际情况灵活地调整来提高性能。是什么原因选择这个 -128 到 127 这个范围呢？因为这个范围的整数值是使用最广泛的，通过使用共享对象，就可以节省内存空间了。在程序中第一次使用 <code>Integer</code> 的时候也需要一定的额外时间来初始化这个缓存。这种机制在其他包装类中也有类似的实现。这种缓存策略也是一种设计模式，叫做享元模式。</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##包装类的缓存机制与valueOf()&lt;/p&gt;
&lt;p&gt;###引言&lt;br&gt;Java有8种基本类型，每种都有一个包装类型，有很多静态方法、变量等，方便对数据进行操作。包装类可以由&lt;code&gt;valueOf()&lt;/code&gt;静态方法去创建，也可以用new关键字去创建实例对象，但
      
    
    </summary>
    
    
      <category term="Java基础" scheme="http://wuyuzhao666.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
