<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>巴斯光甜的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wuyuzhao666.github.io/"/>
  <updated>2019-03-02T00:35:46.159Z</updated>
  <id>http://wuyuzhao666.github.io/</id>
  
  <author>
    <name>Wu yuzhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://wuyuzhao666.github.io/2019/03/02/ArrayList%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/ArrayList%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://wuyuzhao666.github.io/2019/03/02/ArrayList原理解析/ArrayList原理解析/</id>
    <published>2019-03-02T00:37:40.984Z</published>
    <updated>2019-03-02T00:35:46.159Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ArrayList的基本原理"><a href="#ArrayList的基本原理" class="headerlink" title="ArrayList的基本原理"></a>ArrayList的基本原理</h2><blockquote><p><code>ArrayList</code>是我们平时编码经常用到的动态数组容器类，要想分析它的原理，我们先来看看一个简易的DynamicArray类（摘自Java编程的逻辑）</p></blockquote><h3 id="一个简易的动态数组类"><a href="#一个简易的动态数组类" class="headerlink" title="一个简易的动态数组类"></a>一个简易的动态数组类</h3><pre><code>public static class DynamicArray&lt;E&gt;{    private static final int DEFAULT_CAPACITY = 10;    private int size;    private Object[] elementData;   public Dynamicarray() {       this.elementData = new Object[DEFAULT_CAPACITY];   }   public void ensureCapacity(int minCapacity){       int oldCapacity = elementData.length;       if(oldCapacity &gt;= minCapacity){           return;       }       int newCapacity = oldCapacity * 2;       if(newCapacity &lt; minCapacity){           newCapacity = minCapacity;       }       elementData = Arrays.copyOf(elementData,newCapacity);   }   public void add(E e){       ensureCapacity(size + 1);       elementData[size++] = e;   }   public E get(int index){       return (E) elementData[index];   }   public E set(int index,E e){       E e1 = get(index);       elementData[index] = e;       return e1;   }}</code></pre><blockquote><p>在这个类中，定义了一个内部数组elementData，数组元素个数size，一个静态常量DEFAULT_CAPACITY,它表示数组的默认空间大小。这个动态数组类的操作基本都是基于内部数组element和size。<code>ensureCapacity</code>方法,在每次做add操作时，都会被调用，它是检查当前数组容量，并增大容量，然后根据新的容量，复制原来数组的。</p></blockquote><h3 id="ArrayList源码解析："><a href="#ArrayList源码解析：" class="headerlink" title="ArrayList源码解析："></a>ArrayList源码解析：</h3><blockquote><p>ArrayList的基本原理与上文中的动态数组类是差不多的，它同样有静态常量默认空间，实例变量内部数组、元素个数。同样，内部方法基本都是操作elementData这个数组，size实时记录着这个数组的大小，首先我们从<code>add</code>方法说起（各源码内注释已说明白，就不再叙述）。</p></blockquote><p>添加方法add(E e)：</p><pre><code>public boolean add(E e) {    //首先，调用ensureCapacityInternal方法，确保数组容量够。将当前元素个数加一，即最小容量minCapacity传入方法。    ensureCapacityInternal(size + 1);  // Increments modCount!!    elementData[size++] = e;    return true;}</code></pre><p>检查数组容量方法ensureCapacityInternal(int minCapacity)：</p><pre><code>private void ensureCapacityInternal(int minCapacity) {    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));}private static int calculateCapacity(Object[] elementData, int minCapacity) {//如果数组为空，则返回默认值与minCapacity之间的最大值    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {        return Math.max(DEFAULT_CAPACITY, minCapacity);    }    return minCapacity;}private void ensureExplicitCapacity(int minCapacity) {    modCount++;    //如果minCapacity大于当前数组的长度，就调用grow方法增大容量,    if (minCapacity - elementData.length &gt; 0)        grow(minCapacity);}</code></pre><blockquote><p>modCount++表示内部的修改次数，而这个参数与arrayList的迭代有关,下篇博客再讲解。</p></blockquote><p>增大数组容量grow方法(int minCapacity)：</p><pre><code>  private void grow(int minCapacity) {    // overflow-conscious code    int oldCapacity = elementData.length;    //定义一个新的容量newCapacity，它的值为当前容量右移一位，即除以2，再加上当前数组容量，即当前数组容量的1.5倍    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);    //如果还小于当前元素个数加一，新的容量就等于minCapacity    if (newCapacity - minCapacity &lt; 0)        newCapacity = minCapacity;    //如果newCapacity大于一个静态常量MAX_ARRAY_SIZE，就调用hugeCapacity方法，    将newCapacity设定为Integer包装类的最大值0x7fffffff,其中MAX_ARRAY_SIZE为Integer.MAX_VALUE-8，    减8是因为在一些vm中，在数组中会保留一些头信息，尝试分配更大的数组可能导致OutOfMemoryError:    请求的数组大小超过VM限制    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)        newCapacity = hugeCapacity(minCapacity);    // minCapacity is usually close to size, so this is a win:    //以newCapacity为数组size，创建了一个新的数组，复制原内容，赋值给elementData    elementData = Arrays.copyOf(elementData, newCapacity);}private static int hugeCapacity(int minCapacity) {    if (minCapacity &lt; 0) // overflow        throw new OutOfMemoryError();    //如果minCapacity还大于MAX_ARRAY_SIZE，就返回Integer的最大值0x7fffffff    return (minCapacity &gt; MAX_ARRAY_SIZE) ?        Integer.MAX_VALUE :        MAX_ARRAY_SIZE;}</code></pre><p>再来看看remove(int index)方法:</p><pre><code> public E remove(int index) {    rangeCheck(index);    modCount++;    E oldValue = elementData(index);    //计算出需要移动多少位    int numMoved = size - index - 1;    if (numMoved &gt; 0)    //移动数组        System.arraycopy(elementData, index+1, elementData, index,                         numMoved);    //将size减1，GC会回收未经使用的对象    elementData[--size] = null; // clear to let GC do its work    return oldValue;}</code></pre><blockquote><p>这里modCount依旧加一。</p></blockquote><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><blockquote><p>上面，我们介绍了<code>ArrayList</code>的<code>add</code>和<code>remove</code>方法，其他方法也都是对内部数组elementData<br>和元素个数size的操作，就不再探究了。总之，<code>ArrayList</code>就是一个动态数组，实现动态的原理，就是对内部的elementData、size和默认空间<code>DEFAULT_CAPACITY</code>进行操作。创建<code>ArrayList</code>时，会默认初始化一个<code>DEFAULT_CAPACITY</code>大小的数组。每次要做增加操作，就进行数组容量检查，若不够，就增加容量，做删除操作，size就减一，保持size实时记录当前元素个数。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ArrayList的基本原理&quot;&gt;&lt;a href=&quot;#ArrayList的基本原理&quot; class=&quot;headerlink&quot; title=&quot;ArrayList的基本原理&quot;&gt;&lt;/a&gt;ArrayList的基本原理&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Arr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>包装类的缓存机制</title>
    <link href="http://wuyuzhao666.github.io/2019/02/28/%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <id>http://wuyuzhao666.github.io/2019/02/28/包装类的缓存机制/包装类的缓存机制/</id>
    <published>2019-02-28T13:50:12.000Z</published>
    <updated>2019-02-28T14:02:18.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="包装类的缓存机制与valueOf"><a href="#包装类的缓存机制与valueOf" class="headerlink" title="包装类的缓存机制与valueOf()"></a>包装类的缓存机制与valueOf()</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>Java有8种基本类型，每种都有一个包装类型，有很多静态方法、变量等，方便对数据进行操作。包装类可以由<code>valueOf()</code>静态方法去创建，也可以用new关键字去创建实例对象，但为什么推荐使用<code>valueOf()</code>来创建呢。</p><hr><p>首先，我们来看一个例子:</p><pre><code>public class Test {public static void main(String[] args) {    Integer a = 1;    Integer b = 1;    Integer c = 128;    Integer d = 128;    if(a == b){        System.out.println(&quot;a与b相同&quot;);    }    if(c == d){        System.out.println(&quot;c与d相同&quot;);    }}}</code></pre><p><em>运行结果</em>   </p><p>​                                                                                                             </p><p><code>a与b相同                                                                                                      c与d不相同</code></p><p>​                                                                                                         </p><p><em>分析</em></p><blockquote><p> 这段代码创建了4个<code>Integer</code>类型的对象实例a、b、c、d，照常理来说，4个对象，其引用地址不同，此例子的输出应该都为不相同，但结果确是a与b相同，c与d不同，这是为什么？</p></blockquote><p>此处我们是采用自动装箱的方式来创建的<code>Integer</code>对象，而这相当于调用了<code>valueOf()</code>的方法，所以就得从<code>valueOf()</code>这个静态方法说起。</p><p>###valueof的分析</p><p>首先，看看<code>Integer</code>的<code>valueOf()</code>方法的源码</p><pre><code>public static Integer valueOf(int i) {            if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)                return IntegerCache.cache[i + (-IntegerCache.low)];            return new Integer(i);        }</code></pre><p><em>分析</em></p><blockquote><p>此段代码中如果不满足<code>i&gt;=IntegerCache.low &amp;&amp; i&lt;= IntegerCache.high</code>这个表达式，就通过new来得到对象，如果满足呢？</p></blockquote><p>再来看看IntegerCache类，IntegCache类是Integer类的一个内部静态类，其源码如下。</p><pre><code>  /** * Cache to support the object identity semantics of autoboxing for values between * -128 and 127 (inclusive) as required by JLS. * * The cache is initialized on first usage.  The size of the cache * may be controlled by the {@code -XX:AutoBoxCacheMax=&lt;size&gt;} option. * During VM initialization, java.lang.Integer.IntegerCache.high property * may be set and saved in the private system properties in the * sun.misc.VM class. */ private static class IntegerCache {                static final int low = -128;                static final int high;                static final Integer cache[];            static {                // high value may be configured by property                int h = 127;                String integerCacheHighPropValue =                    sun.misc.VM.getSavedProperty(&quot;java.lang.Integer.IntegerCache.high&quot;);                if (integerCacheHighPropValue != null) {                    try {                        int i = parseInt(integerCacheHighPropValue);                        i = Math.max(i, 127);                        // Maximum array size is Integer.MAX_VALUE                        h = Math.min(i, Integer.MAX_VALUE - (-low) -1);                    } catch( NumberFormatException nfe) {                        // If the property cannot be parsed into an int, ignore it.                    }                }                high = h;                cache = new Integer[(high - low) + 1];                int j = low;                for(int k = 0; k &lt; cache.length; k++)                    cache[k] = new Integer(j++);                // range [-128, 127] must be interned (JLS7 5.1.7)                assert IntegerCache.high &gt;= 127;            }            private IntegerCache() {}        }</code></pre><p><em>分析</em></p><blockquote><p>首先，从Javadoc中看出这个类是用来实现缓存的。它定义了三个静态参数，缓存数组<code>cache</code>,数组最小值<code>low</code>，赋值为-128以及数组最大值<code>high</code>，最大值映射到了<code>“java.lang.Integer.IntegerCache.high”</code>上。</p></blockquote><blockquote><p>，并支持 -128 到 127 之间的自动装箱过程。最大值 127 可以通过 JVM 的启动参数 -XX:AutoBoxCacheMax=size 修改。                                                                                                              </p></blockquote><blockquote><p>修改jvm参数后                                                                                                                                                                            </p></blockquote><p>  <img src="/2019/02/28/包装类的缓存机制/包装类的缓存机制/2.png" alt="添加jvm参数">                                                                                                                                 </p><p>​      </p><p><em>运行结果</em></p><p>​                                                                                                       </p><p><code>a与b相同                                                                                                      c与d不相同</code></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p><code>IntegerCache</code>这个<code>Integer</code>私有静态类代表<code>Integer</code>缓存，它在被首次主动使用时，会被初始化，static代码块中的会被执行，通过一个 <code>for</code> 循环创建出一个值为-128~127的一个缓存数组<code>cache</code>，以后，如果创建的值在<code>low</code>和<code>high</code>之间，就可以使用缓存中包含的实例对象，而不是创建一个新的实例(在自动装箱的情况下)。这种机制使我们可以根据应用程序的实际情况灵活地调整来提高性能。是什么原因选择这个 -128 到 127 这个范围呢？因为这个范围的整数值是使用最广泛的，通过使用共享对象，就可以节省内存空间了。在程序中第一次使用 <code>Integer</code> 的时候也需要一定的额外时间来初始化这个缓存。这种机制在其他包装类中也有类似的实现。这种缓存策略也是一种设计模式，叫做享元模式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;包装类的缓存机制与valueOf&quot;&gt;&lt;a href=&quot;#包装类的缓存机制与valueOf&quot; class=&quot;headerlink&quot; title=&quot;包装类的缓存机制与valueOf()&quot;&gt;&lt;/a&gt;包装类的缓存机制与valueOf()&lt;/h2&gt;&lt;h3 id=&quot;引言&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="Java基础" scheme="http://wuyuzhao666.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
