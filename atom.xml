<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>巴斯光甜的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wuyuzhao666.github.io/"/>
  <updated>2019-03-06T00:15:52.834Z</updated>
  <id>http://wuyuzhao666.github.io/</id>
  
  <author>
    <name>Wu yuzhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LinkedList原理解析</title>
    <link href="http://wuyuzhao666.github.io/2019/03/04/LinkedList%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/LinkedList%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://wuyuzhao666.github.io/2019/03/04/LinkedList原理解析/LinkedList原理解析/</id>
    <published>2019-03-04T07:13:49.000Z</published>
    <updated>2019-03-06T00:15:52.834Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LinkedList原理解析"><a href="#LinkedList原理解析" class="headerlink" title="LinkedList原理解析"></a>LinkedList原理解析</h2><blockquote><p>在前面我们对<code>ArrayList</code>(See my <a href="/ArrayList原理解析.md/">ArrayList原理解析</a> page for details.)已做了解析，<code>ArrayList</code>操作维护的是内部数组，元素在内存中是连续存放的，可以通过索引直接访问，访问效率高，但是对于删除和移动来说，性能就较低了。而<code>LinkedList</code>呢，顾名思义，它是一个链表，更确切的说，它是一个双向链表，因为<code>LinkedList</code>的元素都是单独存放的，元素之间在逻辑上通过链接连在一起，下面，我们就解析下<code>LinkedList</code>的原理。</p></blockquote><p>在<code>LinkedList</code>中元素以节点（<code>Node</code>）的方式进行存储：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代表本节点元素</span></span><br><span class="line"></span><br><span class="line">    E item;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代表后继元素</span></span><br><span class="line"></span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代表前驱元素</span></span><br><span class="line"></span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在<code>LinkedList</code>中有个内部类<code>Node<e></e></code>,它来表示<code>LinkedList</code>中的元素。而在其内部也保存着当前节点的前驱和后继两个节点。</p></blockquote><p>在<code>LinkedList</code>中维护着三个变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br></pre></td></tr></table></figure><blockquote><p><code>LinkedList</code>的长度，头节点以及尾节点。<code>LinkedList</code>里的操作大都是围绕着这三个变量来进行的。我们先从<code>add</code>方法看起。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    linkLast(e);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>Ladd(E e)</code>方法，将调用<code>linkLast(E e)</code>方法，插入新节点。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    last = newNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">        first = newNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">        l.next = newNode;</span><br><span class="line"></span><br><span class="line">    size++;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第一步：创建新节点，前驱节点指向尾节点，后继节点为空。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><blockquote><p>第二步：令尾节点为这个新建的节点；若原来链表为空，则头节点指向新节点；非空，则尾节点的后继节点指向新节点；链表长度加1；modCount加1，用于迭代时判断链表的结构变化。</p></blockquote><p>这是在链表末尾进行插入，若要指定位置插入呢？再看看另外一个<code>add(int index,E element)</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检查索引值是否满足index &gt;= 0 &amp;&amp; index &lt;= size</span></span><br><span class="line"></span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//若index值与链表长度相同，则插入到链表末尾。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index == size)</span><br><span class="line"></span><br><span class="line">        linkLast(element);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">        linkBefore(element, node(index));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检查完毕，并且想要插入的位置与链表长度包不同，这调用<code>linkBefore</code>方法进行插入。</p><p><em>因为链表无法向数组那样可以直接查找索引，进行插入，所以要根据索引值查找到对应的节点，在这里调用了node方法来查找节点值</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line"></span><br><span class="line">            x = x.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line"></span><br><span class="line">            x = x.prev;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>与链表长度的一半来进行比较，若index小于链表长度的一半，则从头开始；反之，则从尾节点开始。最后返回找到对应索引值的节点。</p></blockquote><p>找到index对应的节点后，就可以插入了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assert succ != null;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, succ);</span><br><span class="line"></span><br><span class="line">    succ.prev = newNode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果index节点为头节点，则新节点为头节点；不然则插入到index节点之前</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">        first = newNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">        pred.next = newNode;</span><br><span class="line"></span><br><span class="line">    size++;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在中间插入，<code>LinkedList</code>只需要分配内存就行，而<code>ArrayList</code>则需要其他空间，还要移动后续的元素。</p></blockquote><p>我们再来看看<code>remove(int index)</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    checkElementIndex(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> unlink(node(index));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>remove(int index)</code>方法同样也需要检查index值，然后找到index值对应的节点，最后调用<code>unlink</code>删除节点后，返回删除的节点。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// assert x != null;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> E element = x.item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">    first = next;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    prev.next = next;</span><br><span class="line"></span><br><span class="line">    x.prev = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">    last = prev;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;j</span><br><span class="line"></span><br><span class="line">    next.prev = prev;</span><br><span class="line"></span><br><span class="line">    x.next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    x.item = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    size--;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>remove(int index)</code>方法的基本思路也很简单：将删除节点<code>x</code>的前驱节点指向<code>x</code>的后继节点，将<code>x</code>的候后继节点的前驱节点指向<code>x</code>的前驱节点。 </p><p>首先，若<code>x</code>的前驱节点为空，即<code>x</code>为头节点，则<code>x</code>的后继自然就是头节点了。</p></blockquote><blockquote><p>然后，若<code>x</code>的后继节点为空，即<code>x</code>为尾节点，则<code>x</code>的前驱自然就是头节点了。</p></blockquote><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>以上，我们介绍了<code>LinkedList</code>的几个方法，其余方法也都类似，就是链表的一些基本操作。<code>LinkedList</code>内部是以node节点的方式来进行维护的，每个节点内部又有前驱和后继节点，这就相当于一个双向链表，并且在内部还维护着头节点、尾节点以及长度。通过这些，可以得出一些关于<code>LinkedList</code>的一些特点：</p><p>(1)<code>LinkedList</code>不需要预先分配空间，按需进行分配;</p><p>(2)进行头、尾的插入很方便;</p><p>(3)按索引插入，时间复杂度较低，为<em>O(N/2)</em>,但插入效率较高，为<em>O(1)</em>;</p><p>(4)查找的话，效率也较低，时间复杂度为<em>O（N）</em>，不管是否已排序；</p><p>(5)在两端进行查找、删除，时间复杂度为<em>O(1)</em>;</p><p>(6)在中间进行查找、删除，需要逐个比对，时间复杂度为<em>O(N)</em>,但修改效率就只有<em>O(1)</em>。</p><p>综上，若进行的操作涉及大量的插入、删除，尤其是在两端的插入、删除，并且查找中间元素的操作较少的话，使用<code>LinkedList</code>是比较好的选择。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;LinkedList原理解析&quot;&gt;&lt;a href=&quot;#LinkedList原理解析&quot; class=&quot;headerlink&quot; title=&quot;LinkedList原理解析&quot;&gt;&lt;/a&gt;LinkedList原理解析&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在前面我们对&lt;co
      
    
    </summary>
    
    
      <category term="Java基础" scheme="http://wuyuzhao666.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList原理解析</title>
    <link href="http://wuyuzhao666.github.io/2019/03/02/ArrayList%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/ArrayList%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://wuyuzhao666.github.io/2019/03/02/ArrayList原理解析/ArrayList原理解析/</id>
    <published>2019-03-02T00:37:25.000Z</published>
    <updated>2019-03-02T13:26:34.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ArrayList的基本原理"><a href="#ArrayList的基本原理" class="headerlink" title="ArrayList的基本原理"></a>ArrayList的基本原理</h2><blockquote><p><code>ArrayList</code>是我们平时编码经常用到的动态数组容器类，要想分析它的原理，我们先来看看一个简易的DynamicArray类（摘自Java编程的逻辑）</p></blockquote><h3 id="一个简易的动态数组类"><a href="#一个简易的动态数组类" class="headerlink" title="一个简易的动态数组类"></a>一个简易的动态数组类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicArray</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object[] elementData;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Dynamicarray</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[DEFAULT_CAPACITY];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(oldCapacity &gt;= minCapacity)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(newCapacity &lt; minCapacity)&#123;</span><br><span class="line"></span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    elementData = Arrays.copyOf(elementData,newCapacity);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>&#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ensureCapacity(size + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">       elementData[size++] = e;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index,E e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       E e1 = get(index);</span><br><span class="line"></span><br><span class="line">       elementData[index] = e;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> e1;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在这个类中，定义了一个内部数组elementData，数组元素个数size，一个静态常量DEFAULT_CAPACITY,它表示数组的默认空间大小。这个动态数组类的操作基本都是基于内部数组element和size。<code>ensureCapacity</code>方法,在每次做add操作时，都会被调用，它是检查当前数组容量，并增大容量，然后根据新的容量，复制原来数组的。</p></blockquote><h3 id="ArrayList源码解析："><a href="#ArrayList源码解析：" class="headerlink" title="ArrayList源码解析："></a>ArrayList源码解析：</h3><blockquote><p>ArrayList的基本原理与上文中的动态数组类是差不多的，它同样有静态常量默认空间，实例变量内部数组、元素个数。同样，内部方法基本都是操作elementData这个数组，size实时记录着这个数组的大小，首先我们从<code>add</code>方法说起（各源码内注释已说明白，就不再叙述）。</p></blockquote><p>添加方法add(E e)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//首先，调用ensureCapacityInternal方法，确保数组容量够。将当前元素个数加一，即最小容量minCapacity传入方法。</span></span><br><span class="line"></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line"></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检查数组容量方法ensureCapacityInternal(int minCapacity)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果数组为空，则返回默认值与minCapacity之间的最大值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//如果minCapacity大于当前数组的长度，就调用grow方法增大容量,</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        grow(minCapacity);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>modCount++表示内部的修改次数，而这个参数与arrayList的迭代有关,下篇博客再讲解。</p></blockquote><p>增大数组容量grow方法(int minCapacity)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个新的容量newCapacity，它的值为当前容量右移一位，即除以2，再加上当前数组容量，即当前数组容量的1.5倍</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果还小于当前元素个数加一，新的容量就等于minCapacity</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果newCapacity大于一个静态常量MAX_ARRAY_SIZE，就调用hugeCapacity方法，</span></span><br><span class="line"></span><br><span class="line">    将newCapacity设定为Integer包装类的最大值<span class="number">0x7fffffff</span>,其中MAX_ARRAY_SIZE为Integer.MAX_VALUE-<span class="number">8</span>，</span><br><span class="line"></span><br><span class="line">    减<span class="number">8</span>是因为在一些vm中，在数组中会保留一些头信息，尝试分配更大的数组可能导致OutOfMemoryError:</span><br><span class="line"></span><br><span class="line">    请求的数组大小超过VM限制</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//以newCapacity为数组size，创建了一个新的数组，复制原内容，赋值给elementData</span></span><br><span class="line"></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果minCapacity还大于MAX_ARRAY_SIZE，就返回Integer的最大值0x7fffffff</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line"></span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line"></span><br><span class="line">        MAX_ARRAY_SIZE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看看remove(int index)方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   rangeCheck(index);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">modCount++;</span><br><span class="line"></span><br><span class="line">E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算出需要移动多少位</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//移动数组</span></span><br><span class="line"></span><br><span class="line">    System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line"></span><br><span class="line">                     numMoved);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将size减1，GC会回收未经使用的对象</span></span><br><span class="line"></span><br><span class="line">elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里modCount依旧加一。</p></blockquote><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><blockquote><p>上面，我们介绍了<code>ArrayList</code>的<code>add</code>和<code>remove</code>方法，其他方法也都是对内部数组elementData和元素个数size的操作，就不再探究了。总之，<code>ArrayList</code>就是一个动态数组，实现动态的原理，就是对内部的elementData、size和默认空间<code>DEFAULT_CAPACITY</code>进行操作。创建<code>ArrayList</code>时，会默认初始化一个<code>DEFAULT_CAPACITY</code>大小的数组。每次要做增加操作，就进行数组容量检查，若不够，就增加容量，做删除操作，size就减一，保持size实时记录当前元素个数。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ArrayList的基本原理&quot;&gt;&lt;a href=&quot;#ArrayList的基本原理&quot; class=&quot;headerlink&quot; title=&quot;ArrayList的基本原理&quot;&gt;&lt;/a&gt;ArrayList的基本原理&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Arr
      
    
    </summary>
    
    
      <category term="Java基础" scheme="http://wuyuzhao666.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>包装类的缓存机制</title>
    <link href="http://wuyuzhao666.github.io/2019/02/28/%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <id>http://wuyuzhao666.github.io/2019/02/28/包装类的缓存机制/包装类的缓存机制/</id>
    <published>2019-02-28T13:50:12.000Z</published>
    <updated>2019-02-28T14:02:18.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="包装类的缓存机制与valueOf"><a href="#包装类的缓存机制与valueOf" class="headerlink" title="包装类的缓存机制与valueOf()"></a>包装类的缓存机制与valueOf()</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>Java有8种基本类型，每种都有一个包装类型，有很多静态方法、变量等，方便对数据进行操作。包装类可以由<code>valueOf()</code>静态方法去创建，也可以用new关键字去创建实例对象，但为什么推荐使用<code>valueOf()</code>来创建呢。</p><hr><p>首先，我们来看一个例子:</p><pre><code>public class Test {public static void main(String[] args) {    Integer a = 1;    Integer b = 1;    Integer c = 128;    Integer d = 128;    if(a == b){        System.out.println(&quot;a与b相同&quot;);    }    if(c == d){        System.out.println(&quot;c与d相同&quot;);    }}}</code></pre><p><em>运行结果</em>   </p><p>​                                                                                                             </p><p><code>a与b相同                                                                                                      c与d不相同</code></p><p>​                                                                                                         </p><p><em>分析</em></p><blockquote><p> 这段代码创建了4个<code>Integer</code>类型的对象实例a、b、c、d，照常理来说，4个对象，其引用地址不同，此例子的输出应该都为不相同，但结果确是a与b相同，c与d不同，这是为什么？</p></blockquote><p>此处我们是采用自动装箱的方式来创建的<code>Integer</code>对象，而这相当于调用了<code>valueOf()</code>的方法，所以就得从<code>valueOf()</code>这个静态方法说起。</p><p>###valueof的分析</p><p>首先，看看<code>Integer</code>的<code>valueOf()</code>方法的源码</p><pre><code>public static Integer valueOf(int i) {            if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)                return IntegerCache.cache[i + (-IntegerCache.low)];            return new Integer(i);        }</code></pre><p><em>分析</em></p><blockquote><p>此段代码中如果不满足<code>i&gt;=IntegerCache.low &amp;&amp; i&lt;= IntegerCache.high</code>这个表达式，就通过new来得到对象，如果满足呢？</p></blockquote><p>再来看看IntegerCache类，IntegCache类是Integer类的一个内部静态类，其源码如下。</p><pre><code>  /** * Cache to support the object identity semantics of autoboxing for values between * -128 and 127 (inclusive) as required by JLS. * * The cache is initialized on first usage.  The size of the cache * may be controlled by the {@code -XX:AutoBoxCacheMax=&lt;size&gt;} option. * During VM initialization, java.lang.Integer.IntegerCache.high property * may be set and saved in the private system properties in the * sun.misc.VM class. */ private static class IntegerCache {                static final int low = -128;                static final int high;                static final Integer cache[];            static {                // high value may be configured by property                int h = 127;                String integerCacheHighPropValue =                    sun.misc.VM.getSavedProperty(&quot;java.lang.Integer.IntegerCache.high&quot;);                if (integerCacheHighPropValue != null) {                    try {                        int i = parseInt(integerCacheHighPropValue);                        i = Math.max(i, 127);                        // Maximum array size is Integer.MAX_VALUE                        h = Math.min(i, Integer.MAX_VALUE - (-low) -1);                    } catch( NumberFormatException nfe) {                        // If the property cannot be parsed into an int, ignore it.                    }                }                high = h;                cache = new Integer[(high - low) + 1];                int j = low;                for(int k = 0; k &lt; cache.length; k++)                    cache[k] = new Integer(j++);                // range [-128, 127] must be interned (JLS7 5.1.7)                assert IntegerCache.high &gt;= 127;            }            private IntegerCache() {}        }</code></pre><p><em>分析</em></p><blockquote><p>首先，从Javadoc中看出这个类是用来实现缓存的。它定义了三个静态参数，缓存数组<code>cache</code>,数组最小值<code>low</code>，赋值为-128以及数组最大值<code>high</code>，最大值映射到了<code>“java.lang.Integer.IntegerCache.high”</code>上。</p></blockquote><blockquote><p>，并支持 -128 到 127 之间的自动装箱过程。最大值 127 可以通过 JVM 的启动参数 -XX:AutoBoxCacheMax=size 修改。                                                                                                              </p></blockquote><blockquote><p>修改jvm参数后                                                                                                                                                                            </p></blockquote><p>  <img src="/2019/02/28/包装类的缓存机制/包装类的缓存机制/2.png" alt="添加jvm参数">                                                                                                                                 </p><p>​      </p><p><em>运行结果</em></p><p>​                                                                                                       </p><p><code>a与b相同                                                                                                      c与d不相同</code></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p><code>IntegerCache</code>这个<code>Integer</code>私有静态类代表<code>Integer</code>缓存，它在被首次主动使用时，会被初始化，static代码块中的会被执行，通过一个 <code>for</code> 循环创建出一个值为-128~127的一个缓存数组<code>cache</code>，以后，如果创建的值在<code>low</code>和<code>high</code>之间，就可以使用缓存中包含的实例对象，而不是创建一个新的实例(在自动装箱的情况下)。这种机制使我们可以根据应用程序的实际情况灵活地调整来提高性能。是什么原因选择这个 -128 到 127 这个范围呢？因为这个范围的整数值是使用最广泛的，通过使用共享对象，就可以节省内存空间了。在程序中第一次使用 <code>Integer</code> 的时候也需要一定的额外时间来初始化这个缓存。这种机制在其他包装类中也有类似的实现。这种缓存策略也是一种设计模式，叫做享元模式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;包装类的缓存机制与valueOf&quot;&gt;&lt;a href=&quot;#包装类的缓存机制与valueOf&quot; class=&quot;headerlink&quot; title=&quot;包装类的缓存机制与valueOf()&quot;&gt;&lt;/a&gt;包装类的缓存机制与valueOf()&lt;/h2&gt;&lt;h3 id=&quot;引言&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="Java基础" scheme="http://wuyuzhao666.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
