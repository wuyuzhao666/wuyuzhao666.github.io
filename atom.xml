<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>0xCAFEBABE的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wuyuzhao666.github.io/"/>
  <updated>2019-03-17T11:40:38.342Z</updated>
  <id>http://wuyuzhao666.github.io/</id>
  
  <author>
    <name>Wu yuzhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>类加载机制（五）：自定义类加载器与深入双亲委托机制</title>
    <link href="http://wuyuzhao666.github.io/2019/03/17/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E4%B8%8E%E6%B7%B1%E5%85%A5%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%89%98%E6%9C%BA%E5%88%B6/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E4%B8%8E%E6%B7%B1%E5%85%A5%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%89%98%E6%9C%BA%E5%88%B6/"/>
    <id>http://wuyuzhao666.github.io/2019/03/17/类加载机制（五）：自定义类加载器与深入双亲委托机制/类加载机制（五）：自定义类加载器与深入双亲委托机制/</id>
    <published>2019-03-17T00:24:05.000Z</published>
    <updated>2019-03-17T11:40:38.342Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>我们知道类加载器共分为两大类型，<code>Java</code>虚拟机自带的类加载器和自定义类加载器。<code>Java</code>虚拟机自带的类加载器分别加载了不同路径下的<code>class</code>文件，而有时我们需要加载一些特殊的<code>class</code>文件，如这个<code>class</code>文件是被加密的，我们就需要自己定义类加载器去解密加载它，又比如我们需要从网络或者直接从数据库中读取<code>class</code>文件，我们也需要自己定义类加载。</p><p>上文（<a href="/2019/03/15/类加载机制（四）：解析ClassLoader/类加载机制（四）：解析ClassLoader/">类加载机制（四）：解析ClassLoader</a>）我们介绍分析了<code>ClassLoader</code>类，知道这个类是一个抽象类，除了<code>Java</code>虚拟机内建的启动类加载器以为，所有的类加载器都继承于它，并且要重载它的一个方法<code>findClass</code>去搜寻指定名字的<code>class</code>文件，并且如果在一个类中，又有其他类的引用，也是先通过调用类的类加载器先尝试去加载。在此篇文章，我们自定义一个类加载器去加载本地文件系统中的<code>class</code>文件来深入剖析双亲委托机制。</p><h2 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h2><p>首先来看看代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span></span>&#123;</span><br><span class="line"><span class="comment">//定义一个className，表示自定义类加载器的名字</span></span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line"><span class="comment">//定义一个path，表示class文件所在目录</span></span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPath</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.path = path;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//同其父类ClassLoader一样，有两个构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClassLoader</span><span class="params">(ClassLoader parent, String className)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">        <span class="keyword">this</span>.className = className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClassLoader</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.className = className;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//重载的findClass方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//测试自定义类加载器是否执行成功</span></span><br><span class="line">            System.out.println(<span class="string">"自定义class loader name: "</span> + <span class="keyword">this</span>.className);</span><br><span class="line">            <span class="comment">//调用MyLoadClass获取字节数组</span></span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">this</span>.MyLoadClass(name);</span><br><span class="line">            <span class="comment">//调用</span></span><br><span class="line">            <span class="keyword">return</span> defineClass(<span class="keyword">null</span>,bytes,<span class="number">0</span>,bytes.length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] MyLoadClass(String className) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//将传入的类的二进制名转换为类的全限定名（包名+类名）</span></span><br><span class="line">        String replace = className.replace(<span class="string">"."</span>, File.separator);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//将这个class文件转换成字节数组</span></span><br><span class="line">            is = <span class="keyword">new</span> FileInputStream(<span class="keyword">this</span>.path + replace + <span class="string">".class"</span>);</span><br><span class="line">            bis = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">int</span> ch = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (-<span class="number">1</span> != (ch = is.read()))&#123;</span><br><span class="line">                bis.write(ch);</span><br><span class="line">            &#125;</span><br><span class="line">            data = bis.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            is.close();</span><br><span class="line">            bis.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如上代码所示，这个简易的自定义类加载器同样有两个构造方法，没有父类加载器传入的构造方法会调用<code>ClassLoader</code>的无参的构造方法，将系统类加载器设置为这个自定义类加载器的父类加载器；有父类类加载器传入的构造函数，也会调用<code>ClassLoader</code>的构造方法，只不过调用的是有参的构造方法，将传入的这个类加载器设置为这个自定义类加载器的父类加载器。</p></blockquote><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>具体的实现，在注释中，就不过多阐述了。我们在<code>findClass</code>中写了句测试语句<code>System.out.println(&quot;自定义class loader name: &quot; + this.className);</code>,来测试自定义类加载器是否执行成功。到这我们就可以在启动类中进行测试了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">executeLoad</span><span class="params">(MyClassLoader loader,String className)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">      loader.setPath(***********);</span><br><span class="line">      Class&lt;?&gt; loadClass = loader.loadClass(className);</span><br><span class="line">    <span class="comment">//打印出Class对象的hash码</span></span><br><span class="line">      System.out.println(className + <span class="string">"的class对象的hashCode:"</span> + loadClass.hashCode());</span><br><span class="line">    <span class="comment">//创建一个示例</span></span><br><span class="line">      Object o = loadClass.newInstance();</span><br><span class="line">      System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>写了一个执行方法，减少代码，并且在指定的<code>path</code>中放入<code>MyTest1</code>的<code>class</code>文件：</p><ul><li>传入自定义类加载器的实例与要加载的类的二进制名字。</li><li>在方法体里面指定好要加载的<code>class</code>文件目录。</li><li>调用父类的<code>loadClass</code>方法进行加载（<code>ClassLoader</code>具体怎么加载，见<a href="/2019/03/15/类加载机制（四）：解析ClassLoader/类加载机制（四）：解析ClassLoader/">类加载机制（四）：解析ClassLoader</a>）。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    MyClassLoader loader1 = <span class="keyword">new</span> MyClassLoader(<span class="string">"loader1"</span>);</span><br><span class="line">    MyClassLoader.executeLoad(loader1,<span class="string">"classLoader.MyTest1"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">classLoader.MyTest1的class对象的hashCode:1163157884</span><br><span class="line">--------------</span><br></pre></td></tr></table></figure><blockquote><p>竟然只输出了<code>MyTest1</code>的class对象的<code>hashCode</code>，意思是我们的自定义类加载未执行(<code>System.out.println(&quot;自定义class loader name: &quot; + this.className);</code>)</p><p>(⊙o⊙)，怎么回事？</p></blockquote><h5 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h5><p>我们知道关于类的加载也就是<code>class</code>文件的搜索与加载过程是由类加载器完成的，而类加载器又是遵循双亲委托机制的，关于这个机制就不多说了，见以前的文章。</p><p><a href="/2019/03/14/类加载机制（三）：类的加载与类加载器/类加载机制（三）：类的加载与类加载器/">类加载机制（三）：类的加载与类加载器</a></p><p><a href="/2019/03/15/类加载机制（四）：解析ClassLoader/类加载机制（四）：解析ClassLoader/">类加载机制（四）：解析ClassLoader</a></p><p>在<code>MyClassLoader</code>中我们首先调用<code>ClassLoader</code>的<code>loadClass</code>方法，在<code>loadClass</code>中，最终会调用我们重载的这个<code>findClass</code>方法，但现在我们重载的<code>findClass</code>并没有被调用，说明有其他的<code>findClass</code>调用了。那我们在<code>executeLoad</code>中打印下加载的这个<code>class</code>对象的类加载器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"我就是它加载的："</span> + loadClass.getClassLoader());</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我就是它加载的：sun.misc.Launcher$AppClassLoader@18b4aac2</span><br><span class="line">classLoader.MyTest1的class对象的hashCode:1163157884</span><br><span class="line">--------------</span><br></pre></td></tr></table></figure><blockquote><p>结果显示<code>MyTest1</code>是由系统类加载器加载的。</p></blockquote><p>现在水落石出了，原来我们想要加载的<code>MyTest1</code>被系统类加载器给加载了，那为什么呢，其实联想下双亲委托机制就明白了。<code>MyClassLoader</code>收到要加载某个类的请求，就往其父类加载器（系统类加载器）传递，然后，一层层传递，导启动类加载器后，又往下传回来，传到系统类加载器后，系统类加载器发现自己能加载这个类，然后就截胡了，<code>MyTest1.class</code>就被系统类加载器加载到内存中去了。</p><hr><p>我们知道，系统类加载器是从<code>classPath</code>或者<code>java.class.path</code>系统属性中去加载<code>class</code>文件和<code>jar</code>包的，那我们把<code>classPath</code>中的<code>MyTest1.class</code>给删除掉，结果又会怎么样呢？</p><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">自定义class loader name: loader1</span><br><span class="line">我就是它加载的：classLoader.MyClassLoader@<span class="number">4554617</span>c</span><br><span class="line">classLoader.MyTest1的class对象的hashCode:356573597</span><br><span class="line">--------------</span><br></pre></td></tr></table></figure><blockquote><p>输出结果显示：我们的<code>MyClassLoader</code>起作用啦，注意这里<code>hashCode</code>不一样哦(⊙x⊙;)。</p></blockquote><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       MyClassLoader loader1 = <span class="keyword">new</span> MyClassLoader(<span class="string">"loader1"</span>);</span><br><span class="line">       MyClassLoader.executeLoad(loader1,<span class="string">"classLoader.MyTest1"</span>);</span><br><span class="line">       MyClassLoader loader2 = <span class="keyword">new</span> MyClassLoader(<span class="string">"loader2"</span>);</span><br><span class="line">       MyClassLoader.executeLoad(loader2,<span class="string">"classLoader.MyTest1"</span>);</span><br><span class="line">    <span class="comment">//loader2是loader3的类加载器</span></span><br><span class="line">       MyClassLoader loader3 = <span class="keyword">new</span> MyClassLoader(loader2,<span class="string">"loader3"</span>);</span><br><span class="line">       MyClassLoader.executeLoad(loader3,<span class="string">"classLoader.MyTest1"</span>);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>再创建两个<code>MyClassLoader</code>的实例。loader2–&gt;loader3</p></blockquote><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">自定义class loader name: loader1</span><br><span class="line">我就是它加载的：classLoader.MyClassLoader@<span class="number">4554617</span>c</span><br><span class="line">classLoader.MyTest1的class对象的hashCode:356573597</span><br><span class="line">--------------</span><br><span class="line">自定义class loader name: loader2</span><br><span class="line">我就是它加载的：classLoader.MyClassLoader@<span class="number">677327</span>b6</span><br><span class="line">classLoader.MyTest1的class对象的hashCode:2133927002</span><br><span class="line">--------------</span><br><span class="line">我就是它加载的：classLoader.MyClassLoader@<span class="number">677327</span>b6</span><br><span class="line">classLoader.MyTest1的class对象的hashCode:2133927002</span><br><span class="line">--------------</span><br></pre></td></tr></table></figure><blockquote><p>输出结果显示：<code>loader2</code>加载获得的<code>class</code>对象和<code>loader3</code>加载获得的<code>class</code>是一样的。</p></blockquote><p>这个结果其实<code>ClassLoader</code>类中的<code>loadClass</code>很清楚：</p><ul><li>类只会被加载一次（<code>findLoadedClass(String)</code>），返回的<code>class</code>对象都一样。若没有<code>class</code>文件，则会调用当前加载器的<code>findClass</code>方法去查找<code>class</code>文件。</li><li>双亲委托机制是包含关系，实例化<code>loader3</code>时可以让<code>loader2</code>作为自己的父加载器，创建<code>loader3</code>去加载<code>MyTest1</code>时，因为<code>loader2</code>已经加载过了（<code>findLoadedClass(String)</code>），所以使用<code>loader3</code>加载时，<code>loader3</code>直接返回了已经加载过的<code>MyTest1</code>的<code>class</code>对象。</li></ul><h2 id="深入双亲委托机制"><a href="#深入双亲委托机制" class="headerlink" title="深入双亲委托机制"></a>深入双亲委托机制</h2><p>我们通过一些示例代码来进行分析。</p><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><h5 id="NO-1"><a href="#NO-1" class="headerlink" title="NO.1"></a>NO.1</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCat</span><span class="params">()</span></span>&#123;</span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="title">MyCat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//打印出MyCat的类加载器器</span></span><br><span class="line">        System.out.println(<span class="string">"MyCat is loaded by:"</span> + <span class="keyword">this</span>.getClass().getClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//打印出MySample的类加载器器</span></span><br><span class="line">        System.out.println(<span class="string">"MySample is loaded by:"</span> + <span class="keyword">this</span>.getClass().getClassLoader());</span><br><span class="line">        System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line">        <span class="comment">//在MySample的构造方法中创建一个MyCat的实例</span></span><br><span class="line">        <span class="keyword">new</span> MyCat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest13</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//加载MySample类</span></span><br><span class="line">        MyClassLoader loader1 = <span class="keyword">new</span> MyClassLoader(<span class="string">"loader1"</span>);</span><br><span class="line">        MyClassLoader.executeLoad(loader1,<span class="string">"refenLoad.MySample"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">refenLoad.MySample的class对象的hashCode:1956725890</span><br><span class="line">MySample is loaded by:sun.misc.Launcher$AppClassLoader@<span class="number">18</span>b4aac2</span><br><span class="line">--------------</span><br><span class="line">MyCat is loaded by:sun.misc.Launcher$AppClassLoader@<span class="number">18</span>b4aac2</span><br><span class="line">--------------</span><br></pre></td></tr></table></figure><p>具体过程如下：</p><blockquote><ul><li>调用<code>MyClassLoader</code>加载<code>MySample</code>类。</li><li><code>classPath</code>中有<code>MySample</code>类的<code>class</code>文件，系统类加载器将其加载到内存中。</li><li>然后因为在<code>executeLoad</code>方法中创建了对象实例，<code>MySample</code>被首次主动使用，即进行初始化，调用构造函数完成初始化。</li><li>在<code>MySample</code>的构造函数中<code>new MyCat()</code>，即对<code>MyCat</code>的首次主动使用，经历加载连接初始化。</li></ul></blockquote><hr><p>接着，复制一份<code>MySample</code>的<code>class</code>文件到我们设定的<code>path</code>中，删除到<code>classPath</code>中的那份，结果怎么样呢。</p><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">自定义class loader name: loader1</span><br><span class="line">refenLoad.MySample的class对象的hashCode:1735600054</span><br><span class="line">MySample is loaded by:classLoader.MyClassLoader@<span class="number">74</span>a14482</span><br><span class="line">--------------</span><br><span class="line">MyCat is loaded by:sun.misc.Launcher$AppClassLoader@<span class="number">18</span>b4aac2</span><br><span class="line">--------------</span><br></pre></td></tr></table></figure><blockquote><p>为什么，两个类的类加载器又不一样呢？</p></blockquote><ul><li>因为<code>classPath</code>中没有<code>MySample</code>的<code>class</code>文件，所以经过双亲委托机制，最终是通过<code>MyClassLoader</code>来加载我们自己的<code>MySample</code>文件。</li><li>创建<code>MySample</code>实例时，进行<code>MySample</code>的初始化，执行<code>MySample</code>的构造方法。</li><li><code>MySample</code>的构造方法里创建<code>MyCat</code>实例，<em>使用加载<code>MySample</code>的类加载器</em>来加载<code>MyCat</code>。</li><li><code>MyClassLoader</code>加载器委托系统加载器来加载<code>MyCat.class</code>，加载完成。</li></ul><hr><p>再接着，复制一份<code>MyCat</code>的<code>class</code>文件到我们设定的<code>path</code>中，删除到<code>classPath</code>中的那份，结果又怎么样呢。</p><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">自定义class loader name: loader1</span><br><span class="line">refenLoad.MySample的class对象的hashCode:1735600054</span><br><span class="line">MySample is loaded by:classLoader.MyClassLoader@<span class="number">74</span>a14482</span><br><span class="line">--------------</span><br><span class="line">自定义class loader name: loader1</span><br><span class="line">MyCat is loaded by:classLoader.MyClassLoader@<span class="number">74</span>a14482</span><br><span class="line">--------------</span><br></pre></td></tr></table></figure><blockquote><p>它们的类加载器又都是<code>MyClassLoader</code>了。</p></blockquote><ul><li>因为<code>classPath</code>中没有<code>MySample</code>的<code>class</code>文件，所以经过双亲委托机制，最终是通过<code>MyClassLoader</code>来加载我们自己的<code>MySample</code>文件。</li><li>创建<code>MySample</code>实例时，进行<code>MySample</code>的初始化，执行<code>MySample</code>的构造方法。</li><li><code>MySample</code>的构造方法里创建<code>MyCat</code>实例，<em>使用加载<code>MySample</code>的类加载器</em><code>MyClassLoader</code>来加载<code>MyCat</code>，加载成功。</li></ul><p>如果只删除<code>MyCat.class</code>又会怎么样呢？</p><p>系统加载器加载<code>MySmple.class</code>，加载<code>MyCat</code>时，同样使用系统加载器来加载<code>MyCat</code>，但<code>classPath</code>中没有<code>MyCat.class</code>文件，最后就会抛出<code>java.lang.NoClassDefFoundError</code>异常。</p><hr><p>再再接着，<code>reBuild</code>项目，删除掉<code>MySample</code>的<code>class</code>文件，在<code>MyCat</code>的构造方法里打印<code>MySample</code>的class`。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyCat is loaded by:"</span> + <span class="keyword">this</span>.getClass().getClassLoader());</span><br><span class="line">        System.out.println(<span class="string">"from MyCat:"</span> + MySample.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">自定义class loader name: loader1</span><br><span class="line">refenLoad.MySample的class对象的hashCode:1735600054</span><br><span class="line">MySample is loaded by:classLoader.MyClassLoader@<span class="number">74</span>a14482</span><br><span class="line">--------------</span><br><span class="line">MyCat is loaded by:sun.misc.Launcher$AppClassLoader@<span class="number">18</span>b4aac2</span><br></pre></td></tr></table></figure><p><img src="http://res.cloudinary.com/cafebabe/8WB0J_LXX_22D_E_3U_G_E.png"></p><blockquote><p>我们想在<code>MyCat</code>中调用<code>MySample</code>，竟然报错了，找不到<code>MySample</code>类，这里涉及到类的命名空间问题。</p></blockquote><p>最后，只删除<code>classPath</code>中的<code>MySample</code>的<code>class</code>文件，在<code>MySample</code>的构造方法中打印<code>MyCat</code>的<code>class</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyCat is loaded by:"</span> + <span class="keyword">this</span>.getClass().getClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySample</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MySample is loaded by:"</span> + <span class="keyword">this</span>.getClass().getClassLoader());</span><br><span class="line">        System.out.println(<span class="string">"from MyCat:"</span> + MyCat.class);</span><br><span class="line">        System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line">        <span class="keyword">new</span> MyCat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">refenLoad.MySample的class对象的hashCode:1956725890</span><br><span class="line">MySample is loaded by:sun.misc.Launcher$AppClassLoader@<span class="number">18</span>b4aac2</span><br><span class="line">from MyCat:<span class="class"><span class="keyword">class</span> <span class="title">refenLoad</span>.<span class="title">MyCat</span></span></span><br><span class="line"><span class="class">--------------</span></span><br><span class="line">MyCat is loaded by:sun.misc.Launcher$AppClassLoader@18b4aac2</span><br><span class="line">--------------</span><br></pre></td></tr></table></figure><blockquote><p>可以看到，这里就打印成功，也就是说，在<code>MySample</code>中调用<code>MyCat</code>成功，这里同样也是命名空间的问题。</p></blockquote><h5 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h5><p>每个类加载器都有自己的命名空间，<em>命名空间由该加载器及所有父加载器所加载的类组成</em>。</p><ul><li>在同一个命名空间中，不会出现类的完整名字（包括类的包名）相同的两个类</li><li>在不同的命名空间中，有可能会出现类的完整名字（包括类的包名）相同的两个类</li></ul><h6 id="命名空间之间的关系"><a href="#命名空间之间的关系" class="headerlink" title="命名空间之间的关系"></a>命名空间之间的关系</h6><p>同一个命名空间内的类是相互可见的。</p><p>子加载器的命名空间包含所有父加载器的命名空间。因此由只加载器加载的类能看见父加载器加载的类。例如系统类加载器可以看见根类加载器加载的类。</p><p>由父加载器加载的类不能看见子加载器加载的类。</p><p>如果两个加载器之间没有直接或间接的父子关系，那么它们各自加载的类互不可见。</p><hr><p>了解了命名空间后，就明白前面代码的输出结果了。</p><p>（1）删除掉<code>MySample</code>的<code>class</code>文件，在<code>MyCat</code>的构造方法里打印<code>MySample</code>的<code>class</code>。<code>MySample</code>由<code>MyClassLoader</code>加载，<code>MyCat</code>由<code>AppClassLoader</code>加载，父加载器加载的类是看不到子加载器加载的类，则在<code>MyCat</code>中看不到<code>MySample</code>。 </p><p>（2）删除掉<code>MySample</code>的<code>class</code>文件，在<code>MySample</code>的构造方法中打印<code>MyCat</code>的<code>class</code>，<code>MySample</code>由<code>MycalssLoader</code>加载，<code>MyCat</code>由<code>AppClassLoader</code>加载，子加载器能够看见父加载器加载的类，则<code>MySample</code>可以看到<code>MyCat</code>的<code>class</code>。 </p><h5 id="NO-2"><a href="#NO-2" class="headerlink" title="NO.2"></a>NO.2</h5><p>复制一份<code>MyPerson.class</code>到指定的路径下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPerson</span> </span>&#123;</span><br><span class="line">    <span class="comment">//内部维护一个MyPerson的类型的属性</span></span><br><span class="line">    <span class="keyword">private</span> MyPerson person;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//传进来一个对象，强制转换为MyPerson</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPerson</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.person = (MyPerson)o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest14</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//创建两个MyClassLoader的实例，都去加载位于path路径下的MyPerson.class文件</span></span><br><span class="line">        MyClassLoader loader1 = <span class="keyword">new</span> MyClassLoader(<span class="string">"loader1"</span>);</span><br><span class="line">        MyClassLoader loader2 = <span class="keyword">new</span> MyClassLoader(<span class="string">"loader2"</span>);</span><br><span class="line">        loader1.setPath(<span class="string">"C:\\Users\\Administrator\\Desktop\\jvmTest\\"</span>);</span><br><span class="line">        loader2.setPath(<span class="string">"C:\\Users\\Administrator\\Desktop\\jvmTest\\"</span>);</span><br><span class="line">        <span class="comment">//分别去加载MyPerson.class,得到其class对象</span></span><br><span class="line">        Class&lt;?&gt; clazz1 = loader1.loadClass(<span class="string">"classLoader.MyPerson"</span>);</span><br><span class="line">        Class&lt;?&gt; clazz2 = loader2.loadClass(<span class="string">"classLoader.MyPerson"</span>);</span><br><span class="line">        <span class="comment">//比较两个class对象是否相等</span></span><br><span class="line">        System.out.println(clazz1 == clazz2);</span><br><span class="line">        <span class="comment">//通过class对象，创建实例</span></span><br><span class="line">        Object o1 = clazz1.newInstance();</span><br><span class="line">        Object o2 = clazz2.newInstance();</span><br><span class="line">        <span class="comment">//使用反射的方式去调用MyPerson的setPerson方法</span></span><br><span class="line">        Method setPerson = clazz1.getMethod(<span class="string">"setPerson"</span>, Object.class);</span><br><span class="line">        <span class="comment">//调用o1的setPerson方法，将o2传进去。</span></span><br><span class="line">        setPerson.invoke(o1,o2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure><blockquote><p>通过系统类加载器加载，没什么问题。</p></blockquote><p>从<code>classPath</code>中删除掉<code>MyPerson.class</code>文件，再运行程序。</p><p><img src="http://res.cloudinary.com/cafebabe/58Q_M_T0_WN_1XGCZ_4V6.png"></p><blockquote><p>从结果可以看出，两个<code>class</code>对象最终都是由<code>MyClassLoader</code>来加载得到的，但是得到的<code>class</code>并不是同一个，并且在执行<code>o1</code>的<code>setPath</code>方法时还报错，说无法将<code>MyPerson</code>转换为<code>MyPerson</code>，这就很奇怪了？</p></blockquote><p>其实，想想类加载器的命名空间，还是挺简单的。</p><p>一个类在<code>Java</code>虚拟机中的唯一性，是由类与类加载器一起共同决定的，每一个类加载，都有自己独立的命名空间。在此处，<code>loader1</code>与<code>loader2</code>虽然都是<code>MyClassLoader</code>的实例，但是它们之间并不存在双亲委托的关系，即是两个不同的类加载器，即存在两个不同的命名空间，<code>clazz1</code>和<code>clazz2</code>属于不同的命名空间。使用反射去调用<code>MyPerson</code>的<code>serPerson</code>方法，想把<code>o2</code>赋值给<code>o1</code>中的<code>Person</code>属性，但因为<code>clazz1</code>和<code>clazz2</code>是属于不同的命名空间，推广开，<code>o1</code>和<code>o2</code>也属于不同的命名空间，两者之间是不可见的，所以不能将<code>o2</code>赋值给<code>o1</code>的<code>Person</code>属性。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过这个自定义类加载器，我们深入剖析了类加载器的双亲委托机制，这里再放一遍关于类加载器的双亲委托模型的好处：</p><ul><li>可以确保<code>Java</code>核心类库的类型安全：所有的Java应用都至少会引用<code>java.lang.Object</code>类，也就是说在运行期，<code>java.lang.Object</code>这个类会被加载到Java虚拟机中；如果这个加载过程是由各自的类加载器去加载的话，那系统中会产生多个版本的<code>Object</code>类，这些类位于不同的命名空间中，相互之间不兼容，不可见，应用程序将会变得混乱。而通过双亲委托机制，<code>Java</code>核心类库中的类都由启动加载器来完成加载，从而保证了<code>Java</code>应用使用的都是同一个<code>Java</code>核心类库，它们之间是相互兼容的。</li><li>可以确保Java核心类库所提供的类不会被自定义的类所替代。</li><li>不同的类加载器可以加载相同名称的类，这些相同名称的类可以并存在<code>Java</code>虚拟机中。不同类加载器所加载的类是不兼容的，这就相当于在<code>Java</code>虚拟机中创建了一个又一个的相互隔离的<code>Java</code>类空间。</li></ul><p>最后，提一句，内建于<code>JVM</code>的启动类加载器会加载<code>java.lang.ClassLoader</code>以及其他的<code>Java</code>平台类，当<code>JVM</code>启动时，一块特殊的机器码会运行，它会加载扩展类加载器与系统类加载器，这块特殊的机器码叫做启动类加载器（<code>Bootstap</code>）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;我们知道类加载器共分为两大类型，&lt;code&gt;Java&lt;/code&gt;虚拟机自带的类加载器和自定义类加载器。&lt;code&gt;Java&lt;/code&gt;虚
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://wuyuzhao666.github.io/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="类加载机制" scheme="http://wuyuzhao666.github.io/tags/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    
      <category term="自定义类加载器" scheme="http://wuyuzhao666.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>类加载机制（四）：解析ClassLoader</title>
    <link href="http://wuyuzhao666.github.io/2019/03/15/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E8%A7%A3%E6%9E%90ClassLoader/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E8%A7%A3%E6%9E%90ClassLoader/"/>
    <id>http://wuyuzhao666.github.io/2019/03/15/类加载机制（四）：解析ClassLoader/类加载机制（四）：解析ClassLoader/</id>
    <published>2019-03-15T12:28:24.000Z</published>
    <updated>2019-03-16T07:35:00.607Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ClassLoader类"><a href="#ClassLoader类" class="headerlink" title="ClassLoader类"></a>ClassLoader类</h2><h4 id="ClassLoader介绍"><a href="#ClassLoader介绍" class="headerlink" title="ClassLoader介绍"></a>ClassLoader介绍</h4><p><code>ClassLoader</code>顾名思义就是类加载器，它是一个直接继承<code>Object</code>的抽象类，除了启动类加载器以外，所有的类加载器都继承<code>ClassLocader</code>类，应用程序可以去实现这个抽象类，来扩展<code>Java</code>虚拟机加载类的方式。一个类加载器的作用就是加载类，通过一个类的二进制名，一个类加载器就可以通过这个类的二进制名去尝试定位或者生成（在动态加载中，类加载器可以去生成字节码数据）这个二进制名所定义的字节码数据。它的一般策略就是先将这个二进制名转换成这个类的<code>Class</code>文件名，然后从文件系统中读取这个文件。</p><blockquote><p>二进制名(binary name)：<code>Java</code>虚拟机规范规定类加载器加载的类名必须是一个规范的字符串。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;    （<span class="number">1</span>）<span class="string">"java.lang.String"</span></span><br><span class="line">&gt;      （<span class="number">2</span>）<span class="string">"javax.swing.JSpinner$DefaultEditor"</span></span><br><span class="line">&gt;      （<span class="number">3</span>）<span class="string">"java.security.KeyStore$Builder$FileBuilder$1"</span></span><br><span class="line">&gt;      （<span class="number">4</span>）<span class="string">"java.net.URLClassLoader$3$1"</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>（2）表示<code>javax.swing.JSpinner</code>的内部类<code>DefaultEditor</code>。</p><p>（3）表示<code>java.security.KeyStore</code>的内部类<code>Builder</code>的内部类<code>FileBuilder</code>中的第一个内部类。</p><p>/(ㄒoㄒ)/~~</p></blockquote><p>每一个类的<code>Class</code>对象都包含着对其类加载器的引用，意思是可以直接通过类的<code>Class</code>对象获取其类加载器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clazz.getClassLoader();</span><br></pre></td></tr></table></figure><p>对于数组来说，它的<code>Class</code>对象不是由类加载来加载创建的，而是在运行期自动创建的。但是对于元素为引用类型的数组来说，是可以通过<code>clazz.getClassLoader()</code>返回类加载器的，只不过返回的是它的<code>component</code>的类加载器。对于元素类型是基本类型的数组来说，是没有类加载器的。</p><h4 id="ClassLoader源码解析"><a href="#ClassLoader源码解析" class="headerlink" title="ClassLoader源码解析"></a>ClassLoader源码解析</h4><h5 id="ClassLoader的机制"><a href="#ClassLoader的机制" class="headerlink" title="ClassLoader的机制"></a>ClassLoader的机制</h5><p>这个<code>ClassLoader</code>类是通过双亲委托模型来寻找类和资源的（<a href="/2019/03/14/类加载机制（三）：类的加载与类加载器/类加载机制（三）：类的加载与类加载器/">见前文：类加载机制（三）：类的加载与类加载器</a>）：每一个类加载器都有一个父加载器，当收到加载一个类的请求时，类加载器就会去委托它的父加载器去尝试加载类，虚拟机内建的类加载，即启动类加载器是没有父加载器，它是作为类加载器实例的父加载器的。</p><hr><h6 id="内部属性"><a href="#内部属性" class="headerlink" title="内部属性"></a>内部属性</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ClassLoader parent;</span><br></pre></td></tr></table></figure><blockquote><p><code>ClassLoader</code>类内部维护了一个<code>ClassLoader</code>,代表着当前类加载器的父加载器。</p></blockquote><h6 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">ClassLoader</span><span class="params">(ClassLoader parent)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>(checkCreateClassLoader(), parent);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>有参的构造函数，chuan’jian通过传入一个类加载器作为当前类加载器的父加载器。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">ClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(checkCreateClassLoader(), getSystemClassLoader());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>无参的构造函数，使用<code>getSystemClassLoader()</code>获取到系统类加载器作为当前类加载器的父加载器（这个方法也会在后面进行分析）。</p></blockquote><h6 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">       <span class="keyword">return</span> loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>loadClass(String name)</code>方法是<code>ClassLoader</code>类中默认的加载类的方法，它可以加载具有指定的二进制名的类。调用这个方法等价于调用<code>loadClass(name, false)</code>。</p></blockquote><p>再来看看<code>loadClass(name, false)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">        <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">            <span class="comment">// 首先，检查这个类是否已经被加载</span></span><br><span class="line">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//若父类加载器不为空，使用父类加载器去加载</span></span><br><span class="line">                        c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//若父类加载器为空，使用虚拟机内置的启动类加载器进行加载</span></span><br><span class="line">                        c = findBootstrapClassOrNull(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                    <span class="comment">//若仍没加载到，就调用findClass(name)来找到这个类，调用的是</span></span><br><span class="line">                    <span class="comment">//当前类加载器的 findClass(String)方法</span></span><br><span class="line">                    c = findClass(name);</span><br><span class="line">                    <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">                resolveClass(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>loadClass</code>的作用就是根据特定的二进制名加载类。在<code>ClassLoader</code>抽象类中，它搜寻<code>class</code>文件的默认实现是按如下步骤进行的：</p><ul><li><p>执行<code>findLoadedClass(String)</code>查看类是否已经加载加载器不能加载的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;       <span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; findLoadedClass(String name) &#123;</span><br><span class="line">&gt;           <span class="comment">//检查这个二进制名是否合法</span></span><br><span class="line">&gt;           <span class="keyword">if</span> (!checkName(name))</span><br><span class="line">&gt;               <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&gt;           <span class="keyword">return</span> findLoadedClass0(name);</span><br><span class="line">&gt;       &#125;</span><br><span class="line">&gt;   </span><br><span class="line">&gt;       <span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">final</span> Class&lt;?&gt; findLoadedClass0(String name);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><blockquote><p>如果<code>Java</code>虚拟机已经将这个类加载器记录为这个二进制名代表的类的类加载器后，就直接返回这个二进制名代表的类的<code>class</code>对象，否则，就返回<code>null</code>。而这一</p></blockquote><ul><li><p>执行当前类的父类加载器的<code>loadClass</code>。若<code>parent</code>为空，则使用<code>Java</code>虚拟机的内置根加载器来进行加载。</p></li><li><p>执行<code>findClass(String)</code>来找到这个类，调用的是当前类加载器的 <code>findClass(String)</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">&gt;           <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">&gt;       &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><blockquote><p><code>findClass(String)</code>的作用是根据二进制名找到<code>class</code>文件，将<code>class</code>文件转换为字节数组，如上代码所示，这个类是没有执行语句的，所以这个类是需要继承了<code>ClassLoader</code>的类加载器来重载来完成上述功能的，且这个类加载器的实现是遵循双亲委托机制的，这个方法是由<code>loadClass</code>方法调用的。</p></blockquote><ul><li><p>最后，就可以执行<code>defineClass</code>方法了，将<code>Class</code>文件的字节数组转换成<code>Class</code>对象的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; defineClass(String name, <span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span><br><span class="line">&gt;           <span class="keyword">throws</span> ClassFormatError</span><br><span class="line">&gt;       &#123;</span><br><span class="line">&gt;           <span class="keyword">return</span> defineClass(name, b, off, len, <span class="keyword">null</span>);</span><br><span class="line">&gt;       &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><blockquote><p>当传入类的二进制名（可以为空），字节数组，偏移量，数组长度，就由<code>Java</code>虚拟机来完成最后的加载工作。</p></blockquote></blockquote><p>从上文所诉的过程，可以看出加载类的过程其实很简单，当时也体现出了双亲委托机制的思想，从当前类开始，不断的调用其父类加载器，直到启动类加载器为止。</p><p>下篇博客，我会用一个自定义类加载器来深入剖析双亲委托机制。<a href="/2019/03/16/类加载机制（三）：类的加载与类加载器/类加载机制（三）：类的加载与类加载器/">类加载机制（五）：自定义类加载器与深入双亲委托机制</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ClassLoader类&quot;&gt;&lt;a href=&quot;#ClassLoader类&quot; class=&quot;headerlink&quot; title=&quot;ClassLoader类&quot;&gt;&lt;/a&gt;ClassLoader类&lt;/h2&gt;&lt;h4 id=&quot;ClassLoader介绍&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://wuyuzhao666.github.io/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="类加载机制" scheme="http://wuyuzhao666.github.io/tags/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    
      <category term="ClassLoader" scheme="http://wuyuzhao666.github.io/tags/ClassLoader/"/>
    
      <category term="源码解析" scheme="http://wuyuzhao666.github.io/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>类加载机制（三）：类的加载与类加载器</title>
    <link href="http://wuyuzhao666.github.io/2019/03/14/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E4%B8%8E%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E4%B8%8E%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
    <id>http://wuyuzhao666.github.io/2019/03/14/类加载机制（三）：类的加载与类加载器/类加载机制（三）：类的加载与类加载器/</id>
    <published>2019-03-14T07:40:14.000Z</published>
    <updated>2019-03-15T00:12:28.687Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h2><h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>类的加载属于<code>Java</code>虚拟机类加载机制的第一个阶段，它的作用就是将二进制形式的<code>Java</code>类型加载到内存中去，最终形成的就是内存中的<code>Class</code>对象，这个对象封装了类的数据结构。而这个加载过程，就是由一个叫类加载器的程序所完成的，也就是说，一个<code>Java</code>类是由类加载器所加载到内存中的。</p><h4 id="类的预先加载"><a href="#类的预先加载" class="headerlink" title="类的预先加载"></a>类的预先加载</h4><p>在类的加载中，类加载器并不需要等到某个类被<em>首次主动使用</em>时再加载它。<code>JVM</code>规范允许类加载器在预料到某个类将要被使用时就预先加载它，如果在预先加载的过程中遇到了<code>.class</code>文件缺失或存在错误，类加载器必须在<em>程序首次主动使用</em>该类时才报告错误（<code>LinkageError</code>）错误。</p><p>如果这个类一直没有被程序主动使用，那么类加载器就不会报告错误。</p><h2 id="类加载器与双亲委托机制"><a href="#类加载器与双亲委托机制" class="headerlink" title="类加载器与双亲委托机制"></a>类加载器与双亲委托机制</h2><p>顾名思义，类加载器就是用来把类加载到<code>Java</code>虚拟机中的。而从<code>JDK1.2</code>开始，类的加载就是遵循双亲委托机制来进行加载的，这种机制很好的保证了<code>Java</code>平台的安全与程序的有序。</p><h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><p>类加载器一共有两种类型：</p><p><code>Java</code>虚拟机自带的加载器</p><blockquote><p>—-根类加载器（<code>Bootstrap</code>）</p><p>—-扩展类加载器（<code>Extension</code>）</p><p>—-系统（应用）加载器（<code>System</code>）</p></blockquote><p>用户自定义的类加载器</p><blockquote><p>—-<code>java.lang.classLoader</code>的子类</p><p>—-用户可以定制类的加载方式</p></blockquote><h5 id="虚拟机自带加载器"><a href="#虚拟机自带加载器" class="headerlink" title="虚拟机自带加载器"></a>虚拟机自带加载器</h5><ul><li><p>根（Bootstrp）类加载器（启动类加载器）：负责加载的虚拟机的核心类库，比如 <code>java.lang.*</code>等。根类加载器是从系统属性<code>sun.boot.class.path</code>所指定的目录中加载类库。根类加载器本身的实现依赖于底层操作系统，属于虚拟机实现的一部分，它并没有实现<code>java.lang.classLoader</code>类。</p></li><li><p>扩展类加载器（Extension）：负责加载JDK的安装目录的<code>jre\lib\ext</code>子目录下的类库，从系统属性<code>java.ext.dirs</code>所指定的目录中加载类库。扩展类加载器是纯<code>Java</code>类，它继承于<code>java.lang.classLoader</code>类。</p></li><li><p>系统（System）类加载器（应用类加载器）：从环境变量<code>classPath</code>或者从系统属性<code>java.class.path</code>所指定的目录下加载类，它是用户自定义类加载器的默认父加载器。系统类加载器是纯<code>Java</code>类，它继承于<code>java.lang.classLoader</code>类。</p></li></ul><h5 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h5><p>有时想对字节码文件进行加密处理，使用<code>Java</code>虚拟机自带的加载器就无法加载已经加了密的字节码文件，这时就可以使用自定义加载器对加密的字节码文件进行解密，就可以将其还原为正确的字节码文件 。</p><h4 id="双亲委托机制"><a href="#双亲委托机制" class="headerlink" title="双亲委托机制"></a>双亲委托机制</h4><p>在<code>Java</code>虚拟机的类加载阶段，<code>Java</code>程序一般是由上述的类加载器一起配合着加载的。而这些类加载器它们之间配合着加载类采用的是一种叫<em>双亲委托机制</em>的加载机制。除了根类加载器以外，每一个类加载器都有一个父类加载器。</p><p>双亲委托机制的基本流程是这样：当一个类接收到类的加载请求时，它首先不会对其进行加载，而是交给它的父加载器<code>Parent</code>来进行尝试加载，如果这个父加载器不能对这个类进行加载，就继续往上传递，一直到根类加载器为止，如果最后根类加载器也无法加载，又会一级级的传递下来，让适合的类加载器来进行加载。</p><center><img src="https://res.cloudinary.com/cafebabe/image/upload/v1552565156/sqwt-1.png"></center><blockquote><p>如上图所示，自定义类加载器<code>Loader1</code>想要加载<code>Test</code>类，它不会先去加载这个类，而是一级级的往上传递，到达根类加载器后，若根类记载器无法加载，再一级级的传递下来，最后才<code>Loader1</code>来完成加载。</p></blockquote><center><img src="https://res.cloudinary.com/cafebabe/image/upload/v1552568214/swqt-2.png"></center><p>需要指出的是，加载器之间的父子关系实际上指的是加载器对象之间的包装关系，而不是类之间的继承关系。一对父子加载器可能是同一个类加载器类的两个不同实例，也可能不是。在子加载器对象中还包装了一个父加载器对象（<a href="https://res.cloudinary.com/cafebabe/image/upload/v1552568214/swqt-2.png" target="_blank" rel="noopener">请看后续博客:类加载机制（四）：解析ClassLoader</a>）。</p><h4 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h4><h5 id="NO-1"><a href="#NO-1" class="headerlink" title="NO.1"></a>NO.1</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取到系统类加载</span></span><br><span class="line">     ClassLoader classLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">    <span class="comment">//打印出各类加载器</span></span><br><span class="line">    System.out.println(classLoader);</span><br><span class="line">     <span class="keyword">while</span> (<span class="keyword">null</span> != classLoader)&#123;</span><br><span class="line">         <span class="comment">//获取此类加载器的父加载器</span></span><br><span class="line">         classLoader = classLoader.getParent();</span><br><span class="line">         System.out.println(classLoader);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sun.misc.Launcher$AppClassLoader@<span class="number">18</span>b4aac2</span><br><span class="line">sun.misc.Launcher$ExtClassLoader@<span class="number">4554617</span>c</span><br><span class="line"><span class="keyword">null</span></span><br></pre></td></tr></table></figure><blockquote><p>启动类加载器，即根类加载器为<code>null</code>。</p></blockquote><h5 id="NO-2"><a href="#NO-2" class="headerlink" title="NO.2"></a>NO.2</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest12</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] strings = <span class="keyword">new</span> String[<span class="number">1</span>];</span><br><span class="line">        MyTest12[] myTest12s = <span class="keyword">new</span> MyTest12[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span>[] ints = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">        System.out.println(strings.getClass());</span><br><span class="line">        System.out.println(strings.getClass().getClassLoader());</span><br><span class="line">        System.out.println(<span class="string">"----------"</span>);</span><br><span class="line">        System.out.println(myTest12s.getClass());</span><br><span class="line">        System.out.println(myTest12s.getClass().getClassLoader());</span><br><span class="line">        System.out.println(<span class="string">"----------"</span>);</span><br><span class="line">        System.out.println(ints.getClass());</span><br><span class="line">        System.out.println(ints.getClass().getClassLoader());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class [Ljava.lang.String;</span><br><span class="line"><span class="keyword">null</span></span><br><span class="line">----------</span><br><span class="line">class [LclassLoader.MyTest12;</span><br><span class="line">sun.misc.Launcher$AppClassLoader@<span class="number">18</span>b4aac2</span><br><span class="line">----------</span><br><span class="line">class [I</span><br><span class="line"><span class="keyword">null</span></span><br></pre></td></tr></table></figure><blockquote><p>前文已说过，基本数组类的<code>class</code>类型直接继承于<code>java.lang.Object</code>,从上可以看出，<code>component</code>类型为基本数据类型的数组是由启动类加载器所加载的，而引用类型的数组则是由系统类加载器加载的。</p></blockquote><h4 id="双亲委托机制的好处"><a href="#双亲委托机制的好处" class="headerlink" title="双亲委托机制的好处"></a>双亲委托机制的好处</h4><blockquote><p>考虑到章节的完整性，先<code>po</code>出双亲委托机制的好处，关于命名空间导致类不相同的问题，<a href>请看后续博客：类加载机制（五）：自定义类加载器与深入双亲委托机制</a>。</p></blockquote><ul><li><p>可以确保<code>Java</code>核心类库的类型安全，让<code>Java</code>类随着它的类加载器一起具备了一种带有优先级的层次关系：比如，所有的<code>Java</code>应用都至少会引用<code>java.lang.Object</code>类，也就是说在运行期，<code>java.lang.Object</code>这个类会被加载到<code>Java</code>虚拟机中；如果这个加载过程是由各自的类加载器去加载的话，那系统中会产生多个版本的<code>Object</code>类，这些类位于不同的命名空间中，相互之间不兼容，不可见，应用程序将会变得混乱。而通过双亲委托机制，<code>Java</code>核心类库中的类都由启动加载器来完成加载，从而保证了<code>Java</code>应用使用的都是同一个<code>Java</code>核心类库，它们之间是相互兼容的。</p></li><li><p>可以确保Java核心类库所提供的类不会被自定义的类所替代。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;类的加载&quot;&gt;&lt;a href=&quot;#类的加载&quot; class=&quot;headerlink&quot; title=&quot;类的加载&quot;&gt;&lt;/a&gt;类的加载&lt;/h2&gt;&lt;h4 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://wuyuzhao666.github.io/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="类加载机制" scheme="http://wuyuzhao666.github.io/tags/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    
      <category term="类加载器" scheme="http://wuyuzhao666.github.io/tags/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>类加载机制（二）：类的初始化</title>
    <link href="http://wuyuzhao666.github.io/2019/03/13/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E7%B1%BB%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E7%B1%BB%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>http://wuyuzhao666.github.io/2019/03/13/类加载机制（二）：类的初始化/类加载机制（二）：类的初始化/</id>
    <published>2019-03-13T10:49:55.000Z</published>
    <updated>2019-03-14T12:30:15.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a>类的初始化</h2><h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>一般<code>Java</code>程序的<code>class</code>文件经过加载、连接后，就进入初始化阶段，顺序执行<code>static</code>语句，为静态变量赋予正确的值，执行<code>static</code>代码块，初始化类。</p><h4 id="类的使用方式"><a href="#类的使用方式" class="headerlink" title="类的使用方式"></a>类的使用方式</h4><p><code>Java</code>程序对类的使用分为两种：</p><p>—-主动使用</p><p>—-被动使用</p><p>所有的<code>Java</code>虚拟机实现必须在每个类或接口被<code>Java</code>程序<em>首次主动使用</em>时才会初始化它们。</p><h5 id="主动使用方式"><a href="#主动使用方式" class="headerlink" title="主动使用方式"></a>主动使用方式</h5><p>主动使用分为七种：</p><p>—-创建类的实例</p><p>—-访问某个类或接口的静态变量，或者对该静态变量赋值</p><p>—-调用类的静态方法</p><p>—-反射（如<code>Class.forName(com.test.Test)</code>）</p><p>—-初始化一个子类</p><p>—-<code>Java</code>虚拟机启动时被标明为启动类的类</p><p>—-<code>JDK1.7</code>开始提供的动态语言支持：<code>java.lang.invoke.MethodHandle</code>实例的解析结果<code>REF_getStatic,REF_putStatic,REF_invokeStatic</code>句柄对应的类没有初始化，则初始化。</p><p>除了以上七种情况，其他使用<code>Java</code>类的方法都被看作是对类的被动使用，都不会导致类的初始化。</p><h5 id="类的初始化步骤"><a href="#类的初始化步骤" class="headerlink" title="类的初始化步骤"></a>类的初始化步骤</h5><p>对于类来说：</p><blockquote><p>假如这个类还没有被加载和连接，那就先进行加载和连接</p></blockquote><blockquote><p>假如类存在直接父类，并且这个父类还没有被初始化，那就先初始化父类</p></blockquote><blockquote><p>假如类中存在初始化语句，那就一次执行这些初始化语句</p></blockquote><p>对于接口来说：</p><p>当<code>Java</code>虚拟机初始化一个类时，要求它的所有父类都已经被初始化，但是这条规则并不适用于接口。</p><blockquote><p>在初始化一个类时，并不会先初始化它所实现的接口</p><p>在初始化一个接口时，并不会先初始化它的父接口</p></blockquote><p>因此，一个父接口并不会因为它的子接口或者实现类的初始化而初始化。只有当程序首次使用特定接口的静态变量时，才会导致该接口的初始化。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><h5 id="NO-1"><a href="#NO-1" class="headerlink" title="NO.1"></a>NO.1</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Son.str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String str = <span class="string">"parent str"</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"parent static启动"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"son static启动"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><center><img src="http://res.cloudinary.com/cafebabe/mytest1.png"></center><blockquote><p>输出结果显示只有<code>Parent</code>类被加载了。对于静态字段来说，只有直接定义了该字段的类才会被初始化。虽然<code>Son</code>没有被主动使用，但它已经被加载了。类加载器并不需要等到某个类被<em>首次主动使用</em>时再加载它。</p></blockquote><p>将<code>Parent</code>类中的<code>str</code>变量注释掉，添加到<code>Son</code>类中</p><p>输出结果：</p><center><img src="http://res.cloudinary.com/cafebabe/mytest1-2.png"></center><blockquote><p>输出结果显示<code>Parent</code>类与<code>Son</code>类都被初始化了。通过使用<code>Son</code>的静态变量，导致<code>Son</code>的初始化，而当一个类在初始化时，首先要求其父类全部都已经初始化，即导致<code>Parent</code>初始化。</p></blockquote><p>我们还可以从第一段打印类加载信息（通过添加虚拟机参数<code>-XX:+TraceClassLoading</code>）看出，虽然<code>Son</code>没有被主动使用，但它已经被加载了。类加载器并不需要等到某个类被“首次主动使用”时再加载它。</p><h5 id="NO-2"><a href="#NO-2" class="headerlink" title="NO.2"></a>NO.2</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Parent2.str);</span><br><span class="line">        System.out.println(Parent2.bi);</span><br><span class="line">        System.out.println(Parent2.si);</span><br><span class="line">        System.out.println(Parent2.icons_1);</span><br><span class="line">        System.out.println(Parent2.iconst_2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent2</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String str = <span class="string">"Hello Jvm"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> bi = <span class="number">127</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> si = <span class="number">32767</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> icons_1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> iconst_2 = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Parent2 init"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hello Jvm</span><br><span class="line"><span class="number">127</span></span><br><span class="line"><span class="number">32767</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>将<code>Parent</code>的<code>class</code>文件从<code>classPath</code>中删除掉，再运行程序，程序没报错，输出结果一样。</p><blockquote><p>常量的本质含义：常量在编译阶段会存入调用这个常量的常量池中。本质上，调用这个常量并没有直接引用到定义常量的类，因此并不会触发定义常量的类的初始化。如：<code>Paren2</code>中定义的常量被存入到了<code>MyTest2</code>中，之后两个类就没有任何关系了。甚至将<code>Paren2</code>的<code>.class</code>文件删除也没关系。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Parent3.str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent3</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String str = UUID.randomUUID().toString().replace(<span class="string">"-"</span>,<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Paren3 init"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Paren3 init</span><br><span class="line"><span class="number">2</span>b00eb3dbd934bf7ab610407058d276f</span><br></pre></td></tr></table></figure><blockquote><p>输出结果显示<code>Parent3</code>被成功初始化了。而且，删除掉<code>Parent3</code>的<code>class</code>文件，也会报<code>java.lang.NoClassDefFoundError</code>的错误。</p></blockquote><p>在编译期间，对于并不能确定的常量来说，不会被存入到调用类的常量池中。而是在运行期间，主动使用常量的所属类，完成所属类的初始化。</p><h5 id="NO-3"><a href="#NO-3" class="headerlink" title="NO.3"></a>NO.3</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        Parent4 parent4 = new Parent4();</span></span><br><span class="line">        Parent4[] parent4s = <span class="keyword">new</span> Parent4[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span>[] ints = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">        System.out.println(parent4s.getClass());</span><br><span class="line">        System.out.println(parent4s.getClass().getSuperclass());</span><br><span class="line">        System.out.println(<span class="string">"=============="</span>);</span><br><span class="line">        System.out.println(ints.getClass());</span><br><span class="line">        System.out.println(ints.getClass().getSuperclass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent4</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Paren4 init"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class [LclassLoader.Parent4;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br><span class="line"><span class="class"></span>==============</span><br><span class="line">class [I</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br></pre></td></tr></table></figure><blockquote><p>输出结果显示并没有触发<code>Parent</code>的初始化过程，但是却触发了<code>class [LclassLoader.Parent4;</code>的初始化阶段，打印出的这个名称，它直接继承<code>class java.lang.Object</code>，代表了数组的<code>component</code>，即数组的组成元素。</p></blockquote><p>将<code>class</code>文件反编译后，可以看出它的创建动作由助记符<code>newarray</code>触发。</p><center><img src="http://res.cloudinary.com/cafebabe/mytest4.png"></center><p><code>anewarray</code>：表示创建一个引用类型的数组（类、接口、数组），并将其引用值压入栈顶。<br><code>newarray</code>：表示创建一个基本类型的数组（int、char），并将其引用值压入栈顶。</p><h5 id="NO-4"><a href="#NO-4" class="headerlink" title="NO.4"></a>NO.4</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Single instance = Single.getInstance();</span><br><span class="line">        System.out.println(<span class="string">"count1:"</span> + Single.count1);</span><br><span class="line">        System.out.println(<span class="string">"count2:"</span> + Single.count2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count1;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Single single = <span class="keyword">new</span> Single();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;</span><br><span class="line">        count1++;</span><br><span class="line">        count2++;</span><br><span class="line">        System.out.println(<span class="string">"构造方法count1:"</span> + count1);</span><br><span class="line">        System.out.println(<span class="string">"构造方法count2:"</span> + count2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">构造方法count1:<span class="number">1</span></span><br><span class="line">构造方法count2:<span class="number">1</span></span><br><span class="line">count1:<span class="number">1</span></span><br><span class="line">count2:<span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>在<code>MyTest6</code>中调用<code>Single</code>的静态方法，触发<code>Single</code>的初始化阶段。</p><p>—-连接阶段，将静态变量全置为默认值：</p><p><code>count1 = 0</code></p><p><code>count2 = 0</code></p><p><code>single = null</code></p><p>—-初始化阶段，顺序执行静态语句：</p><p>执行到此句时 <code>private static Single single = new Single();</code>,执行<code>Single</code>的构造方法。</p><p><code>count1 = 1</code></p><p><code>count2 = 1</code></p><p>并将其打印，最后再在<code>MyTest6</code>的<code>main</code>方法中调用时，直接从<code>Single</code>的常量池中取出。</p></blockquote><p>修改下<code>Single</code>的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Single single = <span class="keyword">new</span> Single();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;</span><br><span class="line">        count1++;</span><br><span class="line">        count2++;</span><br><span class="line">        System.out.println(<span class="string">"构造方法count1:"</span> + count1);</span><br><span class="line">        System.out.println(<span class="string">"构造方法count2:"</span> + count2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调下顺序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count2 = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">构造方法count1:<span class="number">1</span></span><br><span class="line">构造方法count2:<span class="number">1</span></span><br><span class="line">count1:<span class="number">1</span></span><br><span class="line">count2:<span class="number">0</span></span><br></pre></td></tr></table></figure><p>再修改下<code>Single</code>的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Single</span></span>&#123;</span><br><span class="line">    <span class="comment">//初值赋为1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Single single = <span class="keyword">new</span> Single();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Single</span><span class="params">()</span></span>&#123;</span><br><span class="line">        count1++;</span><br><span class="line">        count2++;</span><br><span class="line">        System.out.println(<span class="string">"构造方法count1:"</span> + count1);</span><br><span class="line">        System.out.println(<span class="string">"构造方法count2:"</span> + count2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count2 = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Single <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> single;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">构造方法count1:<span class="number">2</span></span><br><span class="line">构造方法count2:<span class="number">1</span></span><br><span class="line">count1:<span class="number">2</span></span><br><span class="line">count2:<span class="number">0</span></span><br></pre></td></tr></table></figure><p>经过上面的程序可以看出，静态变量的声明语句，以及静态代码块都被看做类的初始化语句，<code>Java</code>虚拟机会按照初始化语句在类文件中的先后顺序来依次执行它们。</p><h5 id="NO-5"><a href="#NO-5" class="headerlink" title="NO.5"></a>NO.5</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest7</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"MyTest7 invoked"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parent7 parent7;</span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line"><span class="comment">//        parent7 = new Parent7();</span></span><br><span class="line">        Son7 son7 = <span class="keyword">new</span> Son7();</span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line">        System.out.println(Son7.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent7</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Parent7 invoked"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son7</span> <span class="keyword">extends</span> <span class="title">Parent7</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Son7 invoked"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MyTest7 invoked</span><br><span class="line">---------------</span><br><span class="line">Parent7 invoked</span><br><span class="line">Son7 invoked</span><br><span class="line">---------------</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><blockquote><p>输出结果显示：首先使用<code>MyTest7</code>的启动类，导致了<code>MyTest7</code>的初始化，执行了静态代码块；然后声明了一个<code>Parent7</code>的变量，并不会导致<code>Parent7</code>的初始化；最后创建了一个<code>Son7</code>的实例，触发<code>Son7</code>的初始化，触发<code>Parent7</code>的初始化。</p></blockquote><p>将<code>Son7 son7 = new Son7();</code>替换为<code>parent7 = new Parent7();</code></p><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MyTest7 invoked</span><br><span class="line">---------------</span><br><span class="line">Parent7 invoked</span><br><span class="line">---------------</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><blockquote><p>输出结果显示：只有<code>Parent7</code>初始化，而<code>Son7</code>并没有初始化。</p></blockquote><p>上述代码也印证了，在创建实例时以及启动类时，会导致类的初始化；当一个类初始化时，会先初始化它的父类。</p><h5 id="NO-6"><a href="#NO-6" class="headerlink" title="NO.6"></a>NO.6</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest8</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(Son8.a);</span></span><br><span class="line">        Son8.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent8</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Parent8 invoked"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Parent8'doSomething"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son8</span> <span class="keyword">extends</span> <span class="title">Parent8</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Son8 invoked"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Parent8 invoked</span><br><span class="line">Parent8<span class="string">'doSomething</span></span><br></pre></td></tr></table></figure><blockquote><p>输出结果显示：<code>Parent8</code>被初始化了。</p></blockquote><p>调用类的静态方法时，会导致类的初始化。</p><h5 id="NO-7"><a href="#NO-7" class="headerlink" title="NO.7"></a>NO.7</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest9</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//获取一个系统加载器</span></span><br><span class="line">        ClassLoader classLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">        <span class="comment">//使用这个加载器去加载ClassLoad类，得到一个class对象</span></span><br><span class="line">        Class&lt;?&gt; aClass = classLoader.loadClass(<span class="string">"classLoader.ClassLoad"</span>);</span><br><span class="line">        System.out.println(aClass);</span><br><span class="line">        System.out.println(<span class="string">"-----------"</span>);</span><br><span class="line">        <span class="comment">//使用反射获取class对象</span></span><br><span class="line">        Class&lt;?&gt; aClass1 = Class.forName(<span class="string">"classLoader.ClassLoad"</span>);</span><br><span class="line">        System.out.println(aClass1);</span><br><span class="line">        System.out.println(aClass == aClass1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassLoad</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"CL invoked"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">classLoader</span>.<span class="title">ClassLoad</span></span></span><br><span class="line"><span class="class">-----------</span></span><br><span class="line"><span class="class"><span class="title">CL</span> <span class="title">invoked</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">classLoader</span>.<span class="title">ClassLoad</span></span></span><br><span class="line"><span class="class"><span class="title">true</span></span></span><br></pre></td></tr></table></figure><blockquote><p>关于类加载器（<a href="/2019/03/14/类加载机制（三）：类的加载与类加载器">类加载机制（三）：类的加载与类加载器</a>）</p></blockquote><p>可以看出调用ClassLoader类的loadClass方法加载一个类，并不是对类的主动使用，不会导致类的初始化。而使用反射则是对类的主动使用，会触发初始化，并且两个<code>class</code>对象是同一个，这也印证了前文所说的<code>class</code>对象在内存中只会存在一个的说法。</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>​        类的初始化是类加载过程的最后阶段，在前面的类加载过程中，都是有虚拟机来进行主导和控制（除了用户可以自定义类加载外，请看我后续博客），到了初始化阶段，才真正开始执行<code>Java</code>程序中的字节码。</p><p>​        在连接中的准备阶段，静态变量被赋予了默认值，到了初始化阶段，这些变量才被赋予真正的值。在对类进行初始化时，<code>Java</code>虚拟机会按照初始化语句在类文件中的先后顺序来一次执行它们。</p><p>​        一个类只有在被<em>首次主动使用</em>才会触发初始化阶段，也只有上文提到的七种方式才算主动使用，其他都是被动使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;类的初始化&quot;&gt;&lt;a href=&quot;#类的初始化&quot; class=&quot;headerlink&quot; title=&quot;类的初始化&quot;&gt;&lt;/a&gt;类的初始化&lt;/h2&gt;&lt;h4 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://wuyuzhao666.github.io/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="类加载机制" scheme="http://wuyuzhao666.github.io/tags/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    
      <category term="类的初始化" scheme="http://wuyuzhao666.github.io/tags/%E7%B1%BB%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>类加载机制（一）：简述类加载过程</title>
    <link href="http://wuyuzhao666.github.io/2019/03/13/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%AE%80%E8%BF%B0%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%AE%80%E8%BF%B0%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/"/>
    <id>http://wuyuzhao666.github.io/2019/03/13/类加载机制（一）：简述类加载过程/类加载机制（一）：简述类加载过程/</id>
    <published>2019-03-13T02:06:10.000Z</published>
    <updated>2019-03-18T00:18:13.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类加载机制（一）：简述类加载过程"><a href="#类加载机制（一）：简述类加载过程" class="headerlink" title="类加载机制（一）：简述类加载过程"></a>类加载机制（一）：简述类加载过程</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>Java源文件经过编译之后，生成了一连串的16进制的字节码，即以<code>.class</code>结尾的文件，而这些描述了Java程序各种信息的字节码，还必须要加载到Java虚拟机之后，才能被运行及使用，而加载<code>class</code>文件的过程就是jvm的类加载机制。</p><p><img src="http://res.cloudinary.com/cafebabe/classCode.png"></p><h3 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h3><p>与大多数语言一样，Java类型也需要加载、连接与初始化，而不同的是，在Java代码中，类型的这些过程都是在程序运行期所完成的。这个加载过程分为加载、连接（验证、准备、解析）、初始化,整个过程简单来说：</p><p>加载：查找并加载类的二进制数据，即加载<code>class</code>文件</p><p>连接：    </p><p>—-验证：确保被加载的类的正确性</p><p>—-准备：为类的静态变量分配内存，并将其设置为默认值</p><p>—-解析：将类中的符号引用转换为直接引用</p><p>初始化：顺序执行静态代码，即为类的静态变量赋予正确的初始值以及执行静态代码块</p><center><img src="http://res.cloudinary.com/cafebabe/classLoader2.png"></center><h4 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h4><p>类的加载指的是将类的<code>class</code>文件中的二进制数据从硬盘读取到内存中，将其放置在运行时数据区的方法区（虚拟机规范并未要求，但<code>hotspot</code>虚拟机将其放置在虚拟机中）内，然后在内存中创建唯一一个类的class对象，用以封装类在方法区中的数据结构，无论<code>new</code>出多少个对象，最终对应的<code>class</code>对象只有一个。</p><h5 id="类的加载方式"><a href="#类的加载方式" class="headerlink" title="类的加载方式"></a>类的加载方式</h5><p>加载<code>.class</code>文件的方式</p><p>—-从本地文件系统中加载</p><p>—-通过网络下载<code>.class</code>文件</p><p>—-从jar，war等归档文件中加载<code>.class</code>文件</p><p>—-从专有数据库中提取<code>.class</code>文件</p><p>—-将Java源文件动态编译为<code>.class</code>文件</p><blockquote><p>编写一个MyCat类，添加虚拟机参数-XX:+TraceClassLoading参数，运行代码，可以看出，MyCat类被虚拟机从本地文件系统加载到内存中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; jvm虚拟机参数：都以-XX:开始</span><br><span class="line">&gt; -XX:+&lt;option&gt; 表示开启option选项 ,</span><br><span class="line">&gt; -XX:-&lt;option&gt; 表示关闭option选项，</span><br><span class="line">&gt; -XX:&lt;option&gt;=&lt;value&gt;,表示将option值设置为value</span><br><span class="line">&gt; </span><br><span class="line">&gt; -XX:+TraceClassLoading</span><br><span class="line">&gt; 有时候我们需要监控系统中哪些类被加载进来，什么样的类加载的比较频繁，什么样的类加载的比较少，可以使用这个参数来配置打印出程序执行过程中类的加载信息。</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><center><img src="http://res.cloudinary.com/cafebabe/classLoader3.png"></center></blockquote><h5 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h5><p>类的加载是通过类加载器来加载的，虚拟机中有两种类型的加载器。</p><p><code>Java</code>虚拟机自带的加载器</p><p>—-根类加载器（<code>Bootstrap</code>）</p><p>—-扩展类加载器（<code>Extension</code>）</p><p>—-系统（应用）加载器（<code>System</code>）</p><p>用户自定义的类加载器</p><p>—-<code>java.lang.classLoader</code>的子类</p><p>—-用户可以定制类的加载方式</p><p>后续请看我的关于类加载器的文章</p><p><a href="/2019/03/14/类加载机制（三）：类的加载与类加载器/类加载机制（三）：类的加载与类加载器/">类加载机制（三）：类的加载与类加载器</a></p><p><a href="/2019/03/15/类加载机制（四）：解析ClassLoader/类加载机制（四）：解析ClassLoader/">类加载机制（四）：解析ClassLoader</a></p><p><a href="/2019/03/17/类加载机制（五）：自定义类加载器与深入双亲委托机制/类加载机制（五）：自定义类加载器与深入双亲委托机制/">类加载机制（五）：自定义类加载器与深入双亲委托机制</a></p><h4 id="类的连接"><a href="#类的连接" class="headerlink" title="类的连接"></a>类的连接</h4><p>类被加载后，就进入连接阶段。连接就是将已经加载到内存中的类的二进制数据合并到虚拟机的运行时环境中。</p><h5 id="类的验证"><a href="#类的验证" class="headerlink" title="类的验证"></a>类的验证</h5><p>类的验证的内容</p><p>—-类文件的结构检查</p><p>—-语义检查</p><p>—-字节码验证</p><p>—-二进制兼容性的验证</p><h5 id="类的准备"><a href="#类的准备" class="headerlink" title="类的准备"></a>类的准备</h5><p>将静态变量设置为默认值，而实例变量将会在对象实例化时随着对象一起分配到Java堆中去。</p><h5 id="类的解析"><a href="#类的解析" class="headerlink" title="类的解析"></a>类的解析</h5><p>将类中的符号引用转换为直接引用，（摘自深入理解JAVA虚拟机）。</p><blockquote><p>符号引用：</p><p>符号引用：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能够无歧义的定位到目标即可。在Java中，一个java类将会编译成一个class文件。在编译时，java类并不知道所引用的类的实际地址，因此只能使用符号引用来代替。比如org.simple.People类引用了org.simple.Language类，在编译时People类并不知道Language类的实际内存地址，因此只能使用符号org.simple.Language（假设是这个，当然实际中是由类似于CONSTANT_Class_info的常量来表示的）来表示Language类的地址。各种虚拟机实现的内存布局可能有所不同，但是它们能接受的符号引用都是一致的，因为符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。</p><p>直接引用：</p><p>直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局相关的，同一个符号引用在不同的虚拟机实例上翻译出来的直接引用一般不会相同。有了直接引用，那引用的目标必定已经在内存中存在。</p></blockquote><h4 id="类的初始化"><a href="#类的初始化" class="headerlink" title="类的初始化"></a>类的初始化</h4><p>到了初始化阶段，才真正开始执行类中定义的<code>Java</code>代码，在初始化阶段，就会为类变量赋予正确的初始值。</p><p>后续请看我的关于类的初始化的文章。</p><p><a href="/2019/03/13/类加载机制（二）：类的初始化/类加载机制（二）：类的初始化/">类加载机制（二）：类的初始化</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;类加载机制（一）：简述类加载过程&quot;&gt;&lt;a href=&quot;#类加载机制（一）：简述类加载过程&quot; class=&quot;headerlink&quot; title=&quot;类加载机制（一）：简述类加载过程&quot;&gt;&lt;/a&gt;类加载机制（一）：简述类加载过程&lt;/h2&gt;&lt;h3 id=&quot;引言&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="http://wuyuzhao666.github.io/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="类加载机制" scheme="http://wuyuzhao666.github.io/tags/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>HashSet解析</title>
    <link href="http://wuyuzhao666.github.io/2019/03/09/HashSet%E8%A7%A3%E6%9E%90/HashSet%E8%A7%A3%E6%9E%90/"/>
    <id>http://wuyuzhao666.github.io/2019/03/09/HashSet解析/HashSet解析/</id>
    <published>2019-03-09T00:11:42.000Z</published>
    <updated>2019-03-09T00:14:30.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HashSet解析"><a href="#HashSet解析" class="headerlink" title="HashSet解析"></a>HashSet解析</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p> <code>HashSet</code>实现了<code>Set</code>接口，<code>Set</code>表示无重复元素、且不保证访问顺序的容器接口。与<code>HashMap</code>类似，它有如下的构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123; map = <span class="keyword">new</span> HashMap&lt;&gt;();&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;map = <span class="keyword">new</span> HashMap&lt;&gt;(Math.max((<span class="keyword">int</span>) (c.size()/.<span class="number">75f</span>) + <span class="number">1</span>, <span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">  addAll(c);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity, loadFactor);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity);&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>initialCapacity</code>（初始容量，默认16），<code>loadFactor</code>（负载因子，默认0.75）与<code>HashMap</code>中的含义是一样的。</p></blockquote><p><code>HashSet</code>的用法也很简单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">List a= <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">   a.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">   a.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//直接传入个容器类进去</span></span><br><span class="line"></span><br><span class="line">   Set c = <span class="keyword">new</span> HashSet&lt;&gt;(a);</span><br><span class="line"></span><br><span class="line">   Iterator iterator = c.iterator();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">       System.out.println(iterator.next());</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为<code>HashSet</code>中是无重复元素的，所以结果为1。这个特性可以将其用于去重。</p></blockquote><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p><code>HashSet</code>其实就是<code>HashMap</code>实现的，在<code>HashSet</code>内部有个<code>HashMap</code>实例变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br></pre></td></tr></table></figure><p>还有个常量。在Map中有key，有value，而在HashSet中相当于只有key，所有的value都是这个常量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure><p>再来看看add(E e)方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>直接调用<code>HashMap</code>的<code>put</code>方法，将元素作为<code>key</code>，常量<code>PRESENT</code>作为<code>value</code>存入，<code>null</code>值也可以存入，若集合中已有元素，则保持集合不变返回<code>false</code>。</p></blockquote><p>检查也是<code>HashMap</code>的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> map.containsKey(o);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>检查<code>map</code>中是否有对应的key。</p></blockquote><p>删除也是<code>HashMap</code>的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> map.remove(o)==PRESENT;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>删除对应key的节点。</p></blockquote><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p><code>HashSet</code>原理较为简单，实现了<code>Set</code>接口，内部维护了一个<code>HashMap</code>，特点是无重复元素，元素无顺序，可以用于去重，集合运算，若想了解更深层次的，可以看看<code>HashMap</code>的实现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HashSet解析&quot;&gt;&lt;a href=&quot;#HashSet解析&quot; class=&quot;headerlink&quot; title=&quot;HashSet解析&quot;&gt;&lt;/a&gt;HashSet解析&lt;/h2&gt;&lt;h3 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="容器类" scheme="http://wuyuzhao666.github.io/tags/%E5%AE%B9%E5%99%A8%E7%B1%BB/"/>
    
      <category term="HashSet" scheme="http://wuyuzhao666.github.io/tags/HashSet/"/>
    
  </entry>
  
  <entry>
    <title>HashMap解析之hash(key)</title>
    <link href="http://wuyuzhao666.github.io/2019/03/07/HashMap%E8%A7%A3%E6%9E%90%E4%B9%8Bhash(key)/HashMap%E8%A7%A3%E6%9E%90%E4%B9%8Bhash(key)/"/>
    <id>http://wuyuzhao666.github.io/2019/03/07/HashMap解析之hash(key)/HashMap解析之hash(key)/</id>
    <published>2019-03-07T11:44:54.000Z</published>
    <updated>2019-03-08T12:01:04.448Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HashMap解析之hash-key"><a href="#HashMap解析之hash-key" class="headerlink" title="HashMap解析之hash(key)"></a>HashMap解析之hash(key)</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>  <code>HashMap</code>是<code>Map</code>接口的一个实现类，它的实现方式利用了<code>hash</code>，使用了数组链表的形式来存储数据，<code>HashMap</code>内部维护了一个<code>Node&lt;k,v&gt;</code>类型的数组<code>table</code>（哈希表），每个元素<code>table[i]</code>指向一个单向链表，根据键存取值，通过相应的运算得到数组中的索引位置,然后再操作<code>table[i]</code>指向的单向链表。这个数组在初次使用的时候会被初始化，并且，数组长度为2的次方数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure><p>在<code>HashMap</code>中，它是一种数组链表的形式，每个存入的元素被包装成一个<code>Node</code>,<code>Node</code>是一个内部类，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line"></span><br><span class="line">    V value;</span><br><span class="line"></span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.hash = hash;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + value; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        V oldValue = value;</span><br><span class="line"></span><br><span class="line">        value = newValue;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line"></span><br><span class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line"></span><br><span class="line">                Objects.equals(value, e.getValue()))</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在<code>Node</code>中，维护了节点元素、元素的key、key的hash值，以及下一个节点next，这种方式就构成了一个单向链表的形式。</p></blockquote><h3 id="hash（key）"><a href="#hash（key）" class="headerlink" title="hash（key）"></a>hash（key）</h3><p>先来看看put方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算出key的hash值，一起传入</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>方便讲解，直接给出结论。</em></p><p>向<code>HashMap</code>中put、get、remove元素时，是根据节点的<code>key</code>的<code>hash</code>值来对哈希表进行操作的，那是如何通过<code>hash</code>值来进行索引的呢，先看看<code>hash(key)</code>的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由节点的key值计算</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//若key为null，则hash值为0，所以在HashCode中key值可以为空；</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 否则，将key的hashcode值与hashcode的右移16位进行异或</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据hash值取得对应的节点</span></span><br><span class="line"></span><br><span class="line">tab[i = (n - <span class="number">1</span>) &amp; hash]</span><br></pre></td></tr></table></figure><p>计算过程如下：</p><p><img src="http://res.cloudinary.com/cafebabe/image/upload/hash_count.png"></p><blockquote><p>了解了hash值的计算过程以及如何存取节点到数组中后，应该要知道为什么需要这样来建立索引？</p></blockquote><blockquote><p>因为数组索引是由hash值确定的，所以最重要的就是避免hash冲突，即以上的这些对hashCode的操作都是为了避免hash冲突，使节点在数组中分布均匀。</p></blockquote><p>针对这个计算过程，提出三个问题（<a href="https://juejin.im/post/5aa5d8d26fb9a028d2079264" title="Title" target="_blank" rel="noopener">此处参考原PO</a>）</p><p>1.为什么不直接采用经过hashCode（）处理的哈希码作为存储数组table的下标位置？</p><p>2.为什么采用哈希码与运算(&amp;)（数组长度-1）计算数组下标？</p><p>3.为什么在计算数组下标前，需对哈希码进行二次处理：扰动处理？</p><p>第一个问题</p><blockquote><p>因为直接算出来的hashCode值是2进制的32位数，要是直接使用这个数的话，就可能会出现hashCode的值远远大于数组实际元素个数，这样节点分布就会极不均匀，并且也浪费了大量的空间，所以，采用哈希码与运算(&amp;)（数组长度-1）计算数组下标。</p></blockquote><p>第二个问题</p><blockquote><p>1.数组长度-1</p></blockquote><blockquote><p>数组长度=2的幂=（二进制表示）100…00的形式=首位为1、后面均为0。要是直接去&amp;哈希码，会有如下几个后果。</p></blockquote><blockquote><p>（1）算出的下标值就会集中于某几位，这样增大了hash冲突的可能性。</p></blockquote><blockquote><p>（2）数组长度为偶数，最后一位0，&amp;出结果肯定为偶数，这样浪费了一半空间，而且也增大了hash冲突的可能性。</p></blockquote><blockquote><p>(数组长度-1)=（二进制表示）011…11的形式=首位为0、后面均为1。</p></blockquote><blockquote><p>（1）这样&amp;出的结果，就会由hash码的低位来决定，并且最后一位为1，&amp;出的结果是奇数还是偶数，由hash码的最后以为决定。</p></blockquote><blockquote><p>2.&amp;运算</p></blockquote><blockquote><p>hash码与运算数组长度 实际上=将hash值对数组长度取模，减小索引的值。为了提高效率，采用位运算&amp;，只有但数组长度=2的幂次方时，h&amp;(n-1)才等价与h%n。</p></blockquote><p><img src="http://res.cloudinary.com/cafebabe/image/upload/hash_yu.png"></p><blockquote><p>这样做的结果，都是为了让&amp;出的结果，由hash码来控制，能让结果更加的均匀。</p></blockquote><p>第三个问题</p><blockquote><p>因为一般数组长度只会对应hash码的后几位，这样求出的结果也会易造成hash冲突，经过移位运算，得到的hash码更加均匀，提高了数组索引的随机性和均匀性。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HashMap解析之hash-key&quot;&gt;&lt;a href=&quot;#HashMap解析之hash-key&quot; class=&quot;headerlink&quot; title=&quot;HashMap解析之hash(key)&quot;&gt;&lt;/a&gt;HashMap解析之hash(key)&lt;/h2&gt;&lt;h3 id=
      
    
    </summary>
    
      <category term="Java基础" scheme="http://wuyuzhao666.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="HashMap" scheme="http://wuyuzhao666.github.io/tags/HashMap/"/>
    
      <category term="容器类" scheme="http://wuyuzhao666.github.io/tags/%E5%AE%B9%E5%99%A8%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>LinkedList原理解析</title>
    <link href="http://wuyuzhao666.github.io/2019/03/04/LinkedList%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/LinkedList%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://wuyuzhao666.github.io/2019/03/04/LinkedList原理解析/LinkedList原理解析/</id>
    <published>2019-03-04T07:13:49.000Z</published>
    <updated>2019-03-07T14:07:27.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LinkedList原理解析"><a href="#LinkedList原理解析" class="headerlink" title="LinkedList原理解析"></a>LinkedList原理解析</h2><blockquote><p>在前面我们对<code>ArrayList</code>(See my <a href="/2019/03/02/ArrayList原理解析/ArrayList原理解析/">ArrayList原理解析</a> page for details.)已做了解析，<code>ArrayList</code>操作维护的是内部数组，元素在内存中是连续存放的，可以通过索引直接访问，访问效率高，但是对于删除和移动来说，性能就较低了。而<code>LinkedList</code>呢，顾名思义，它是一个链表，更确切的说，它是一个双向链表，因为<code>LinkedList</code>的元素都是单独存放的，元素之间在逻辑上通过链接连在一起，下面，我们就解析下<code>LinkedList</code>的原理。</p></blockquote><p>在<code>LinkedList</code>中元素以节点（<code>Node</code>）的方式进行存储：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代表本节点元素</span></span><br><span class="line"></span><br><span class="line">    E item;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代表后继元素</span></span><br><span class="line"></span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代表前驱元素</span></span><br><span class="line"></span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在<code>LinkedList</code>中有个内部类<code>Node<e></e></code>,它来表示<code>LinkedList</code>中的元素。而在其内部也保存着当前节点的前驱和后继两个节点。</p></blockquote><p>在<code>LinkedList</code>中维护着三个变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br></pre></td></tr></table></figure><blockquote><p><code>LinkedList</code>的长度，头节点以及尾节点。<code>LinkedList</code>里的操作大都是围绕着这三个变量来进行的。我们先从<code>add</code>方法看起。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    linkLast(e);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>Ladd(E e)</code>方法，将调用<code>linkLast(E e)</code>方法，插入新节点。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    last = newNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">        first = newNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">        l.next = newNode;</span><br><span class="line"></span><br><span class="line">    size++;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第一步：创建新节点，前驱节点指向尾节点，后继节点为空。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><blockquote><p>第二步：令尾节点为这个新建的节点；若原来链表为空，则头节点指向新节点；非空，则尾节点的后继节点指向新节点；链表长度加1；modCount加1，用于迭代时判断链表的结构变化。</p></blockquote><p>这是在链表末尾进行插入，若要指定位置插入呢？再看看另外一个<code>add(int index,E element)</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检查索引值是否满足index &gt;= 0 &amp;&amp; index &lt;= size</span></span><br><span class="line"></span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//若index值与链表长度相同，则插入到链表末尾。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index == size)</span><br><span class="line"></span><br><span class="line">        linkLast(element);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">        linkBefore(element, node(index));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检查完毕，并且想要插入的位置与链表长度包不同，这调用<code>linkBefore</code>方法进行插入。</p><p><em>因为链表无法向数组那样可以直接查找索引，进行插入，所以要根据索引值查找到对应的节点，在这里调用了node方法来查找节点值</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line"></span><br><span class="line">            x = x.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line"></span><br><span class="line">            x = x.prev;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>与链表长度的一半来进行比较，若index小于链表长度的一半，则从头开始；反之，则从尾节点开始。最后返回找到对应索引值的节点。</p></blockquote><p>找到index对应的节点后，就可以插入了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// assert succ != null;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, succ);</span><br><span class="line"></span><br><span class="line">    succ.prev = newNode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果index节点为头节点，则新节点为头节点；不然则插入到index节点之前</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">        first = newNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">        pred.next = newNode;</span><br><span class="line"></span><br><span class="line">    size++;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在中间插入，<code>LinkedList</code>只需要分配内存就行，而<code>ArrayList</code>则需要其他空间，还要移动后续的元素。</p></blockquote><p>我们再来看看<code>remove(int index)</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    checkElementIndex(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> unlink(node(index));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>remove(int index)</code>方法同样也需要检查index值，然后找到index值对应的节点，最后调用<code>unlink</code>删除节点后，返回删除的节点。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// assert x != null;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> E element = x.item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">    first = next;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    prev.next = next;</span><br><span class="line"></span><br><span class="line">    x.prev = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">    last = prev;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;j</span><br><span class="line"></span><br><span class="line">    next.prev = prev;</span><br><span class="line"></span><br><span class="line">    x.next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    x.item = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    size--;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>remove(int index)</code>方法的基本思路也很简单：将删除节点<code>x</code>的前驱节点指向<code>x</code>的后继节点，将<code>x</code>的候后继节点的前驱节点指向<code>x</code>的前驱节点。 </p><p>首先，若<code>x</code>的前驱节点为空，即<code>x</code>为头节点，则<code>x</code>的后继自然就是头节点了。</p></blockquote><blockquote><p>然后，若<code>x</code>的后继节点为空，即<code>x</code>为尾节点，则<code>x</code>的前驱自然就是头节点了。</p></blockquote><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>以上，我们介绍了<code>LinkedList</code>的几个方法，其余方法也都类似，就是链表的一些基本操作。<code>LinkedList</code>内部是以node节点的方式来进行维护的，每个节点内部又有前驱和后继节点，这就相当于一个双向链表，并且在内部还维护着头节点、尾节点以及长度。通过这些，可以得出一些关于<code>LinkedList</code>的一些特点：</p><p>(1)<code>LinkedList</code>不需要预先分配空间，按需进行分配;</p><p>(2)进行头、尾的插入很方便;</p><p>(3)按索引插入，时间复杂度较低，为<em>O(N/2)</em>,但插入效率较高，为<em>O(1)</em>;</p><p>(4)查找的话，效率也较低，时间复杂度为<em>O（N）</em>，不管是否已排序；</p><p>(5)在两端进行查找、删除，时间复杂度为<em>O(1)</em>;</p><p>(6)在中间进行查找、删除，需要逐个比对，时间复杂度为<em>O(N)</em>,但修改效率就只有<em>O(1)</em>。</p><p>综上，若进行的操作涉及大量的插入、删除，尤其是在两端的插入、删除，并且查找中间元素的操作较少的话，使用<code>LinkedList</code>是比较好的选择。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;LinkedList原理解析&quot;&gt;&lt;a href=&quot;#LinkedList原理解析&quot; class=&quot;headerlink&quot; title=&quot;LinkedList原理解析&quot;&gt;&lt;/a&gt;LinkedList原理解析&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在前面我们对&lt;co
      
    
    </summary>
    
      <category term="Java基础" scheme="http://wuyuzhao666.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="容器类" scheme="http://wuyuzhao666.github.io/tags/%E5%AE%B9%E5%99%A8%E7%B1%BB/"/>
    
      <category term="LinkedList" scheme="http://wuyuzhao666.github.io/tags/LinkedList/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList原理解析</title>
    <link href="http://wuyuzhao666.github.io/2019/03/02/ArrayList%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/ArrayList%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://wuyuzhao666.github.io/2019/03/02/ArrayList原理解析/ArrayList原理解析/</id>
    <published>2019-03-02T00:37:25.000Z</published>
    <updated>2019-03-07T14:07:13.359Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ArrayList的基本原理"><a href="#ArrayList的基本原理" class="headerlink" title="ArrayList的基本原理"></a>ArrayList的基本原理</h2><blockquote><p><code>ArrayList</code>是我们平时编码经常用到的动态数组容器类，要想分析它的原理，我们先来看看一个简易的DynamicArray类（摘自Java编程的逻辑）</p></blockquote><h3 id="一个简易的动态数组类"><a href="#一个简易的动态数组类" class="headerlink" title="一个简易的动态数组类"></a>一个简易的动态数组类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicArray</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object[] elementData;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Dynamicarray</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[DEFAULT_CAPACITY];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(oldCapacity &gt;= minCapacity)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(newCapacity &lt; minCapacity)&#123;</span><br><span class="line"></span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    elementData = Arrays.copyOf(elementData,newCapacity);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>&#123;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">ensureCapacity(size + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">       elementData[size++] = e;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index,E e)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       E e1 = get(index);</span><br><span class="line"></span><br><span class="line">       elementData[index] = e;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> e1;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在这个类中，定义了一个内部数组elementData，数组元素个数size，一个静态常量DEFAULT_CAPACITY,它表示数组的默认空间大小。这个动态数组类的操作基本都是基于内部数组element和size。<code>ensureCapacity</code>方法,在每次做add操作时，都会被调用，它是检查当前数组容量，并增大容量，然后根据新的容量，复制原来数组的。</p></blockquote><h3 id="ArrayList源码解析："><a href="#ArrayList源码解析：" class="headerlink" title="ArrayList源码解析："></a>ArrayList源码解析：</h3><blockquote><p>ArrayList的基本原理与上文中的动态数组类是差不多的，它同样有静态常量默认空间，实例变量内部数组、元素个数。同样，内部方法基本都是操作elementData这个数组，size实时记录着这个数组的大小，首先我们从<code>add</code>方法说起（各源码内注释已说明白，就不再叙述）。</p></blockquote><p>添加方法add(E e)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//首先，调用ensureCapacityInternal方法，确保数组容量够。将当前元素个数加一，即最小容量minCapacity传入方法。</span></span><br><span class="line"></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line"></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检查数组容量方法ensureCapacityInternal(int minCapacity)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果数组为空，则返回默认值与minCapacity之间的最大值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//如果minCapacity大于当前数组的长度，就调用grow方法增大容量,</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        grow(minCapacity);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>modCount++表示内部的修改次数，而这个参数与arrayList的迭代有关,下篇博客再讲解。</p></blockquote><p>增大数组容量grow方法(int minCapacity)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个新的容量newCapacity，它的值为当前容量右移一位，即除以2，再加上当前数组容量，即当前数组容量的1.5倍</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果还小于当前元素个数加一，新的容量就等于minCapacity</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果newCapacity大于一个静态常量MAX_ARRAY_SIZE，就调用hugeCapacity方法，</span></span><br><span class="line"></span><br><span class="line">    将newCapacity设定为Integer包装类的最大值<span class="number">0x7fffffff</span>,其中MAX_ARRAY_SIZE为Integer.MAX_VALUE-<span class="number">8</span>，</span><br><span class="line"></span><br><span class="line">    减<span class="number">8</span>是因为在一些vm中，在数组中会保留一些头信息，尝试分配更大的数组可能导致OutOfMemoryError:</span><br><span class="line"></span><br><span class="line">    请求的数组大小超过VM限制</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//以newCapacity为数组size，创建了一个新的数组，复制原内容，赋值给elementData</span></span><br><span class="line"></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果minCapacity还大于MAX_ARRAY_SIZE，就返回Integer的最大值0x7fffffff</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line"></span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line"></span><br><span class="line">        MAX_ARRAY_SIZE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看看remove(int index)方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   rangeCheck(index);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">modCount++;</span><br><span class="line"></span><br><span class="line">E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算出需要移动多少位</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//移动数组</span></span><br><span class="line"></span><br><span class="line">    System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line"></span><br><span class="line">                     numMoved);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将size减1，GC会回收未经使用的对象</span></span><br><span class="line"></span><br><span class="line">elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里modCount依旧加一。</p></blockquote><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><blockquote><p>上面，我们介绍了<code>ArrayList</code>的<code>add</code>和<code>remove</code>方法，其他方法也都是对内部数组elementData和元素个数size的操作，就不再探究了。总之，<code>ArrayList</code>就是一个动态数组，实现动态的原理，就是对内部的elementData、size和默认空间<code>DEFAULT_CAPACITY</code>进行操作。创建<code>ArrayList</code>时，会默认初始化一个<code>DEFAULT_CAPACITY</code>大小的数组。每次要做增加操作，就进行数组容量检查，若不够，就增加容量，做删除操作，size就减一，保持size实时记录当前元素个数。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ArrayList的基本原理&quot;&gt;&lt;a href=&quot;#ArrayList的基本原理&quot; class=&quot;headerlink&quot; title=&quot;ArrayList的基本原理&quot;&gt;&lt;/a&gt;ArrayList的基本原理&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Arr
      
    
    </summary>
    
      <category term="Java基础" scheme="http://wuyuzhao666.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="容器类" scheme="http://wuyuzhao666.github.io/tags/%E5%AE%B9%E5%99%A8%E7%B1%BB/"/>
    
      <category term="ArrayList" scheme="http://wuyuzhao666.github.io/tags/ArrayList/"/>
    
  </entry>
  
  <entry>
    <title>包装类的缓存机制</title>
    <link href="http://wuyuzhao666.github.io/2019/02/28/%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <id>http://wuyuzhao666.github.io/2019/02/28/包装类的缓存机制/包装类的缓存机制/</id>
    <published>2019-02-28T13:50:12.000Z</published>
    <updated>2019-03-07T14:07:36.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="包装类的缓存机制与valueOf"><a href="#包装类的缓存机制与valueOf" class="headerlink" title="包装类的缓存机制与valueOf()"></a>包装类的缓存机制与valueOf()</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>Java有8种基本类型，每种都有一个包装类型，有很多静态方法、变量等，方便对数据进行操作。包装类可以由<code>valueOf()</code>静态方法去创建，也可以用new关键字去创建实例对象，但为什么推荐使用<code>valueOf()</code>来创建呢。</p><hr><p>首先，我们来看一个例子:</p><pre><code>public class Test {public static void main(String[] args) {    Integer a = 1;    Integer b = 1;    Integer c = 128;    Integer d = 128;    if(a == b){        System.out.println(&quot;a与b相同&quot;);    }    if(c == d){        System.out.println(&quot;c与d相同&quot;);    }}}</code></pre><p><em>运行结果</em>   </p><p>​                                                                                                             </p><p><code>a与b相同                                                                                                      c与d不相同</code></p><p>​                                                                                                         </p><p><em>分析</em></p><blockquote><p> 这段代码创建了4个<code>Integer</code>类型的对象实例a、b、c、d，照常理来说，4个对象，其引用地址不同，此例子的输出应该都为不相同，但结果确是a与b相同，c与d不同，这是为什么？</p></blockquote><p>此处我们是采用自动装箱的方式来创建的<code>Integer</code>对象，而这相当于调用了<code>valueOf()</code>的方法，所以就得从<code>valueOf()</code>这个静态方法说起。</p><p>###valueof的分析</p><p>首先，看看<code>Integer</code>的<code>valueOf()</code>方法的源码</p><pre><code>public static Integer valueOf(int i) {            if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)                return IntegerCache.cache[i + (-IntegerCache.low)];            return new Integer(i);        }</code></pre><p><em>分析</em></p><blockquote><p>此段代码中如果不满足<code>i&gt;=IntegerCache.low &amp;&amp; i&lt;= IntegerCache.high</code>这个表达式，就通过new来得到对象，如果满足呢？</p></blockquote><p>再来看看IntegerCache类，IntegCache类是Integer类的一个内部静态类，其源码如下。</p><pre><code>  /** * Cache to support the object identity semantics of autoboxing for values between * -128 and 127 (inclusive) as required by JLS. * * The cache is initialized on first usage.  The size of the cache * may be controlled by the {@code -XX:AutoBoxCacheMax=&lt;size&gt;} option. * During VM initialization, java.lang.Integer.IntegerCache.high property * may be set and saved in the private system properties in the * sun.misc.VM class. */ private static class IntegerCache {                static final int low = -128;                static final int high;                static final Integer cache[];            static {                // high value may be configured by property                int h = 127;                String integerCacheHighPropValue =                    sun.misc.VM.getSavedProperty(&quot;java.lang.Integer.IntegerCache.high&quot;);                if (integerCacheHighPropValue != null) {                    try {                        int i = parseInt(integerCacheHighPropValue);                        i = Math.max(i, 127);                        // Maximum array size is Integer.MAX_VALUE                        h = Math.min(i, Integer.MAX_VALUE - (-low) -1);                    } catch( NumberFormatException nfe) {                        // If the property cannot be parsed into an int, ignore it.                    }                }                high = h;                cache = new Integer[(high - low) + 1];                int j = low;                for(int k = 0; k &lt; cache.length; k++)                    cache[k] = new Integer(j++);                // range [-128, 127] must be interned (JLS7 5.1.7)                assert IntegerCache.high &gt;= 127;            }            private IntegerCache() {}        }</code></pre><p><em>分析</em></p><blockquote><p>首先，从Javadoc中看出这个类是用来实现缓存的。它定义了三个静态参数，缓存数组<code>cache</code>,数组最小值<code>low</code>，赋值为-128以及数组最大值<code>high</code>，最大值映射到了<code>“java.lang.Integer.IntegerCache.high”</code>上。</p></blockquote><blockquote><p>，并支持 -128 到 127 之间的自动装箱过程。最大值 127 可以通过 JVM 的启动参数 -XX:AutoBoxCacheMax=size 修改。                                                                                                              </p></blockquote><blockquote><p>修改jvm参数后                                                                                                                                                                            </p></blockquote><p>  <img src="/2019/02/28/包装类的缓存机制/包装类的缓存机制/2.png" alt="添加jvm参数">                                                                                                                                 </p><p>​      </p><p><em>运行结果</em></p><p>​                                                                                                       </p><p><code>a与b相同                                                                                                      c与d不相同</code></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p><code>IntegerCache</code>这个<code>Integer</code>私有静态类代表<code>Integer</code>缓存，它在被首次主动使用时，会被初始化，static代码块中的会被执行，通过一个 <code>for</code> 循环创建出一个值为-128~127的一个缓存数组<code>cache</code>，以后，如果创建的值在<code>low</code>和<code>high</code>之间，就可以使用缓存中包含的实例对象，而不是创建一个新的实例(在自动装箱的情况下)。这种机制使我们可以根据应用程序的实际情况灵活地调整来提高性能。是什么原因选择这个 -128 到 127 这个范围呢？因为这个范围的整数值是使用最广泛的，通过使用共享对象，就可以节省内存空间了。在程序中第一次使用 <code>Integer</code> 的时候也需要一定的额外时间来初始化这个缓存。这种机制在其他包装类中也有类似的实现。这种缓存策略也是一种设计模式，叫做享元模式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;包装类的缓存机制与valueOf&quot;&gt;&lt;a href=&quot;#包装类的缓存机制与valueOf&quot; class=&quot;headerlink&quot; title=&quot;包装类的缓存机制与valueOf()&quot;&gt;&lt;/a&gt;包装类的缓存机制与valueOf()&lt;/h2&gt;&lt;h3 id=&quot;引言&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Java基础" scheme="http://wuyuzhao666.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="容器类" scheme="http://wuyuzhao666.github.io/tags/%E5%AE%B9%E5%99%A8%E7%B1%BB/"/>
    
      <category term="缓存机制" scheme="http://wuyuzhao666.github.io/tags/%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
</feed>
