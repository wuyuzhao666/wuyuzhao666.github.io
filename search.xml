<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[HashMap解析(一)：hash(key)]]></title>
    <url>%2F2019%2F03%2F07%2FHashMap%E8%A7%A3%E6%9E%90(%E4%B8%80)%EF%BC%9Ahash(key)%2FHashMap%E8%A7%A3%E6%9E%90(%E4%B8%80)%EF%BC%9Ahash(%E4%B8%80)%2F</url>
    <content type="text"><![CDATA[HashMap解析(一)：hash(key)引言 HashMap是Map接口的一个实现类，它的实现方式利用了hash，使用了数组链表的形式来存储数据，HashMap内部维护了一个Node&lt;k,v&gt;类型的数组table（哈希表），每个元素table[i]指向一个单向链表，根据键存取值，通过相应的运算得到数组中的索引位置,然后再操作table[i]指向的单向链表。这个数组在初次使用的时候会被初始化，并且，数组长度为2的次方数。 1transient Node&lt;K,V&gt;[] table; 在HashMap中，它是一种数组链表的形式，每个存入的元素被包装成一个Node,Node是一个内部类，源码如下： 123456789101112131415161718192021222324252627static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123; final int hash; final K key; V value; Node&lt;K,V&gt; next; Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123; this.hash = hash; this.key = key; this.value = value; this.next = next; &#125; public final K getKey() &#123; return key; &#125; public final V getValue() &#123; return value; &#125; public final String toString() &#123; return key + "=" + value; &#125; 123456789101112131415161718192021222324252627282930313233343536373839 public final int hashCode() &#123; return Objects.hashCode(key) ^ Objects.hashCode(value); &#125; public final V setValue(V newValue) &#123; V oldValue = value; value = newValue; return oldValue; &#125; public final boolean equals(Object o) &#123; if (o == this) return true; if (o instanceof Map.Entry) &#123; Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o; if (Objects.equals(key, e.getKey()) &amp;&amp; Objects.equals(value, e.getValue())) return true; &#125; return false; &#125;&#125; 在Node中，维护了节点元素、元素的key、key的hash值，以及下一个节点next，这种方式就构成了一个单向链表的形式。 hash（key）先来看看put方法： 1234567public V put(K key, V value) &#123; //计算出key的hash值，一起传入 return putVal(hash(key), key, value, false, true);&#125; 方便讲解，直接给出结论。 向HashMap中put、get、remove元素时，是根据节点的key的hash值来对哈希表进行操作的，那是如何通过hash值来进行索引的呢，先看看hash(key)的源码： 12345678910111213141516171819//由节点的key值计算 static final int hash(Object key) &#123; int h; //若key为null，则hash值为0，所以在HashCode中key值可以为空； // 否则，将key的hashcode值与hashcode的右移16位进行异或 return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);&#125;------------------------------------------//根据hash值取得对应的节点tab[i = (n - 1) &amp; hash] 计算过程如下： 了解了hash值的计算过程以及如何存取节点到数组中后，应该要知道为什么需要这样来建立索引？ 因为数组索引是由hash值确定的，所以最重要的就是避免hash冲突，即以上的这些对hashCode的操作都是为了避免hash冲突，使节点在数组中分布均匀。 针对这个计算过程，提出三个问题（此处参考原PO） 1.为什么不直接采用经过hashCode（）处理的哈希码作为存储数组table的下标位置？ 2.为什么采用哈希码与运算(&amp;)（数组长度-1）计算数组下标？ 3.为什么在计算数组下标前，需对哈希码进行二次处理：扰动处理？ 第一个问题 因为直接算出来的hashCode值是2进制的32位数，要是直接使用这个数的话，就可能会出现hashCode的值远远大于数组实际元素个数，这样节点分布就会极不均匀，并且也浪费了大量的空间，所以，采用哈希码与运算(&amp;)（数组长度-1）计算数组下标。 第二个问题 1.数组长度-1 数组长度=2的幂=（二进制表示）100…00的形式=首位为1、后面均为0。要是直接去&amp;哈希码，会有如下几个后果。 （1）算出的下标值就会集中于某几位，这样增大了hash冲突的可能性。 （2）数组长度为偶数，最后一位0，&amp;出结果肯定为偶数，这样浪费了一半空间，而且也增大了hash冲突的可能性。 (数组长度-1)=（二进制表示）011…11的形式=首位为0、后面均为1。 （1）这样&amp;出的结果，就会由hash码的低位来决定，并且最后一位为1，&amp;出的结果是奇数还是偶数，由hash码的最后以为决定。 2.&amp;运算 hash码与运算数组长度 实际上=将hash值对数组长度取模，减小索引的值。为了提高效率，采用位运算&amp;，只有但数组长度=2的幂次方时，h&amp;(n-1)才等价与h%n。 这样做的结果，都是为了让&amp;出的结果，由hash码来控制，能让结果更加的均匀。 第三个问题 因为一般数组长度只会对应hash码的后几位，这样求出的结果也会易造成hash冲突，经过移位运算，得到的hash码更加均匀，提高了数组索引的随机性和均匀性。]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>容器类</tag>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LinkedList原理解析]]></title>
    <url>%2F2019%2F03%2F04%2FLinkedList%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%2FLinkedList%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%2F</url>
    <content type="text"><![CDATA[LinkedList原理解析 在前面我们对ArrayList(See my ArrayList原理解析 page for details.)已做了解析，ArrayList操作维护的是内部数组，元素在内存中是连续存放的，可以通过索引直接访问，访问效率高，但是对于删除和移动来说，性能就较低了。而LinkedList呢，顾名思义，它是一个链表，更确切的说，它是一个双向链表，因为LinkedList的元素都是单独存放的，元素之间在逻辑上通过链接连在一起，下面，我们就解析下LinkedList的原理。 在LinkedList中元素以节点（Node）的方式进行存储： 12345678910111213141516171819202122232425 private static class Node&lt;E&gt; &#123; //代表本节点元素 E item; //代表后继元素 Node&lt;E&gt; next; //代表前驱元素 Node&lt;E&gt; prev; Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123; this.item = element; this.next = next; this.prev = prev; &#125;&#125; 在LinkedList中有个内部类Node,它来表示LinkedList中的元素。而在其内部也保存着当前节点的前驱和后继两个节点。 在LinkedList中维护着三个变量： 12345 transient int size = 0;transient Node&lt;E&gt; first;transient Node&lt;E&gt; last; LinkedList的长度，头节点以及尾节点。LinkedList里的操作大都是围绕着这三个变量来进行的。我们先从add方法看起。 1234567 public boolean add(E e) &#123; linkLast(e); return true;&#125; Ladd(E e)方法，将调用linkLast(E e)方法，插入新节点。 123456789101112131415161718192021 void linkLast(E e) &#123; final Node&lt;E&gt; l = last; final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null); last = newNode; if (l == null) first = newNode; else l.next = newNode; size++; modCount++;&#125; 第一步：创建新节点，前驱节点指向尾节点，后继节点为空。 1final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null); 第二步：令尾节点为这个新建的节点；若原来链表为空，则头节点指向新节点；非空，则尾节点的后继节点指向新节点；链表长度加1；modCount加1，用于迭代时判断链表的结构变化。 这是在链表末尾进行插入，若要指定位置插入呢？再看看另外一个add(int index,E element)方法 1234567891011121314151617 public void add(int index, E element) &#123; //检查索引值是否满足index &gt;= 0 &amp;&amp; index &lt;= size checkPositionIndex(index); //若index值与链表长度相同，则插入到链表末尾。 if (index == size) linkLast(element); else linkBefore(element, node(index));&#125; 检查完毕，并且想要插入的位置与链表长度包不同，这调用linkBefore方法进行插入。 因为链表无法向数组那样可以直接查找索引，进行插入，所以要根据索引值查找到对应的节点，在这里调用了node方法来查找节点值 123456789101112131415161718192021222324252627 Node&lt;E&gt; node(int index) &#123; // assert isElementIndex(index); if (index &lt; (size &gt;&gt; 1)) &#123; Node&lt;E&gt; x = first; for (int i = 0; i &lt; index; i++) x = x.next; return x; &#125; else &#123; Node&lt;E&gt; x = last; for (int i = size - 1; i &gt; index; i--) x = x.prev; return x; &#125;&#125; 与链表长度的一半来进行比较，若index小于链表长度的一半，则从头开始；反之，则从尾节点开始。最后返回找到对应索引值的节点。 找到index对应的节点后，就可以插入了。 12345678910111213141516171819202122232425 void linkBefore(E e, Node&lt;E&gt; succ) &#123; // assert succ != null; final Node&lt;E&gt; pred = succ.prev; final Node&lt;E&gt; newNode = new Node&lt;&gt;(pred, e, succ); succ.prev = newNode; //如果index节点为头节点，则新节点为头节点；不然则插入到index节点之前 if (pred == null) first = newNode; else pred.next = newNode; size++; modCount++;&#125; 在中间插入，LinkedList只需要分配内存就行，而ArrayList则需要其他空间，还要移动后续的元素。 我们再来看看remove(int index)方法。 1234567 public E remove(int index) &#123; checkElementIndex(index); return unlink(node(index));&#125; remove(int index)方法同样也需要检查index值，然后找到index值对应的节点，最后调用unlink删除节点后，返回删除的节点。 123456789E unlink(Node&lt;E&gt; x) &#123;// assert x != null;final E element = x.item;final Node&lt;E&gt; next = x.next;final Node&lt;E&gt; prev = x.prev; 1234567891011if (prev == null) &#123; first = next;&#125; else &#123; prev.next = next; x.prev = null;&#125; 1234567891011if (next == null) &#123; last = prev;&#125; else &#123;j next.prev = prev; x.next = null;&#125; 123456789 x.item = null; size--; modCount++; return element;&#125; remove(int index)方法的基本思路也很简单：将删除节点x的前驱节点指向x的后继节点，将x的候后继节点的前驱节点指向x的前驱节点。 首先，若x的前驱节点为空，即x为头节点，则x的后继自然就是头节点了。 然后，若x的后继节点为空，即x为尾节点，则x的前驱自然就是头节点了。 结论以上，我们介绍了LinkedList的几个方法，其余方法也都类似，就是链表的一些基本操作。LinkedList内部是以node节点的方式来进行维护的，每个节点内部又有前驱和后继节点，这就相当于一个双向链表，并且在内部还维护着头节点、尾节点以及长度。通过这些，可以得出一些关于LinkedList的一些特点： (1)LinkedList不需要预先分配空间，按需进行分配; (2)进行头、尾的插入很方便; (3)按索引插入，时间复杂度较低，为O(N/2),但插入效率较高，为O(1); (4)查找的话，效率也较低，时间复杂度为O（N），不管是否已排序； (5)在两端进行查找、删除，时间复杂度为O(1); (6)在中间进行查找、删除，需要逐个比对，时间复杂度为O(N),但修改效率就只有O(1)。 综上，若进行的操作涉及大量的插入、删除，尤其是在两端的插入、删除，并且查找中间元素的操作较少的话，使用LinkedList是比较好的选择。]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>容器类</tag>
        <tag>LinkedList</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ArrayList原理解析]]></title>
    <url>%2F2019%2F03%2F02%2FArrayList%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%2FArrayList%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90%2F</url>
    <content type="text"><![CDATA[ArrayList的基本原理 ArrayList是我们平时编码经常用到的动态数组容器类，要想分析它的原理，我们先来看看一个简易的DynamicArray类（摘自Java编程的逻辑） 一个简易的动态数组类1234567public static class DynamicArray&lt;E&gt;&#123; private static final int DEFAULT_CAPACITY = 10; private int size; private Object[] elementData; 1234567891011121314151617181920212223242526272829public Dynamicarray() &#123; this.elementData = new Object[DEFAULT_CAPACITY];&#125;public void ensureCapacity(int minCapacity)&#123; int oldCapacity = elementData.length; if(oldCapacity &gt;= minCapacity)&#123; return; &#125; int newCapacity = oldCapacity * 2; if(newCapacity &lt; minCapacity)&#123; newCapacity = minCapacity; &#125; elementData = Arrays.copyOf(elementData,newCapacity);&#125;public void add(E e)&#123; 1234567891011121314151617181920212223 ensureCapacity(size + 1); elementData[size++] = e; &#125; public E get(int index)&#123; return (E) elementData[index]; &#125; public E set(int index,E e)&#123; E e1 = get(index); elementData[index] = e; return e1; &#125;&#125; 在这个类中，定义了一个内部数组elementData，数组元素个数size，一个静态常量DEFAULT_CAPACITY,它表示数组的默认空间大小。这个动态数组类的操作基本都是基于内部数组element和size。ensureCapacity方法,在每次做add操作时，都会被调用，它是检查当前数组容量，并增大容量，然后根据新的容量，复制原来数组的。 ArrayList源码解析： ArrayList的基本原理与上文中的动态数组类是差不多的，它同样有静态常量默认空间，实例变量内部数组、元素个数。同样，内部方法基本都是操作elementData这个数组，size实时记录着这个数组的大小，首先我们从add方法说起（各源码内注释已说明白，就不再叙述）。 添加方法add(E e)： 1234567891011public boolean add(E e) &#123; //首先，调用ensureCapacityInternal方法，确保数组容量够。将当前元素个数加一，即最小容量minCapacity传入方法。 ensureCapacityInternal(size + 1); // Increments modCount!! elementData[size++] = e; return true;&#125; 检查数组容量方法ensureCapacityInternal(int minCapacity)： 1234567891011121314151617181920212223private void ensureCapacityInternal(int minCapacity) &#123; ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));&#125;private static int calculateCapacity(Object[] elementData, int minCapacity) &#123;//如果数组为空，则返回默认值与minCapacity之间的最大值 if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123; return Math.max(DEFAULT_CAPACITY, minCapacity); &#125; return minCapacity;&#125;private void ensureExplicitCapacity(int minCapacity) &#123; modCount++; 1234567 //如果minCapacity大于当前数组的长度，就调用grow方法增大容量, if (minCapacity - elementData.length &gt; 0) grow(minCapacity);&#125; modCount++表示内部的修改次数，而这个参数与arrayList的迭代有关,下篇博客再讲解。 增大数组容量grow方法(int minCapacity)： 1234567891011121314151617181920212223242526272829303132333435 private void grow(int minCapacity) &#123; // overflow-conscious code int oldCapacity = elementData.length; //定义一个新的容量newCapacity，它的值为当前容量右移一位，即除以2，再加上当前数组容量，即当前数组容量的1.5倍 int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1); //如果还小于当前元素个数加一，新的容量就等于minCapacity if (newCapacity - minCapacity &lt; 0) newCapacity = minCapacity; //如果newCapacity大于一个静态常量MAX_ARRAY_SIZE，就调用hugeCapacity方法， 将newCapacity设定为Integer包装类的最大值0x7fffffff,其中MAX_ARRAY_SIZE为Integer.MAX_VALUE-8， 减8是因为在一些vm中，在数组中会保留一些头信息，尝试分配更大的数组可能导致OutOfMemoryError: 请求的数组大小超过VM限制 if (newCapacity - MAX_ARRAY_SIZE &gt; 0) newCapacity = hugeCapacity(minCapacity); // minCapacity is usually close to size, so this is a win: //以newCapacity为数组size，创建了一个新的数组，复制原内容，赋值给elementData elementData = Arrays.copyOf(elementData, newCapacity);&#125; 123456789101112131415private static int hugeCapacity(int minCapacity) &#123; if (minCapacity &lt; 0) // overflow throw new OutOfMemoryError(); //如果minCapacity还大于MAX_ARRAY_SIZE，就返回Integer的最大值0x7fffffff return (minCapacity &gt; MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE;&#125; 再来看看remove(int index)方法: 123public E remove(int index) &#123; rangeCheck(index); 12345678910111213141516171819modCount++;E oldValue = elementData(index);//计算出需要移动多少位int numMoved = size - index - 1;if (numMoved &gt; 0)//移动数组 System.arraycopy(elementData, index+1, elementData, index, numMoved);//将size减1，GC会回收未经使用的对象elementData[--size] = null; // clear to let GC do its work 123 return oldValue;&#125; 这里modCount依旧加一。 结论 上面，我们介绍了ArrayList的add和remove方法，其他方法也都是对内部数组elementData和元素个数size的操作，就不再探究了。总之，ArrayList就是一个动态数组，实现动态的原理，就是对内部的elementData、size和默认空间DEFAULT_CAPACITY进行操作。创建ArrayList时，会默认初始化一个DEFAULT_CAPACITY大小的数组。每次要做增加操作，就进行数组容量检查，若不够，就增加容量，做删除操作，size就减一，保持size实时记录当前元素个数。]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>容器类</tag>
        <tag>ArrayList</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[包装类的缓存机制]]></title>
    <url>%2F2019%2F02%2F28%2F%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%2F%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[包装类的缓存机制与valueOf()引言Java有8种基本类型，每种都有一个包装类型，有很多静态方法、变量等，方便对数据进行操作。包装类可以由valueOf()静态方法去创建，也可以用new关键字去创建实例对象，但为什么推荐使用valueOf()来创建呢。 首先，我们来看一个例子: public class Test { public static void main(String[] args) { Integer a = 1; Integer b = 1; Integer c = 128; Integer d = 128; if(a == b){ System.out.println(&quot;a与b相同&quot;); } if(c == d){ System.out.println(&quot;c与d相同&quot;); } } } 运行结果 ​ a与b相同 c与d不相同 ​ 分析 这段代码创建了4个Integer类型的对象实例a、b、c、d，照常理来说，4个对象，其引用地址不同，此例子的输出应该都为不相同，但结果确是a与b相同，c与d不同，这是为什么？ 此处我们是采用自动装箱的方式来创建的Integer对象，而这相当于调用了valueOf()的方法，所以就得从valueOf()这个静态方法说起。 ###valueof的分析 首先，看看Integer的valueOf()方法的源码 public static Integer valueOf(int i) { if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high) return IntegerCache.cache[i + (-IntegerCache.low)]; return new Integer(i); } 分析 此段代码中如果不满足i&gt;=IntegerCache.low &amp;&amp; i&lt;= IntegerCache.high这个表达式，就通过new来得到对象，如果满足呢？ 再来看看IntegerCache类，IntegCache类是Integer类的一个内部静态类，其源码如下。 /** * Cache to support the object identity semantics of autoboxing for values between * -128 and 127 (inclusive) as required by JLS. * * The cache is initialized on first usage. The size of the cache * may be controlled by the {@code -XX:AutoBoxCacheMax=&lt;size&gt;} option. * During VM initialization, java.lang.Integer.IntegerCache.high property * may be set and saved in the private system properties in the * sun.misc.VM class. */ private static class IntegerCache { static final int low = -128; static final int high; static final Integer cache[]; static { // high value may be configured by property int h = 127; String integerCacheHighPropValue = sun.misc.VM.getSavedProperty(&quot;java.lang.Integer.IntegerCache.high&quot;); if (integerCacheHighPropValue != null) { try { int i = parseInt(integerCacheHighPropValue); i = Math.max(i, 127); // Maximum array size is Integer.MAX_VALUE h = Math.min(i, Integer.MAX_VALUE - (-low) -1); } catch( NumberFormatException nfe) { // If the property cannot be parsed into an int, ignore it. } } high = h; cache = new Integer[(high - low) + 1]; int j = low; for(int k = 0; k &lt; cache.length; k++) cache[k] = new Integer(j++); // range [-128, 127] must be interned (JLS7 5.1.7) assert IntegerCache.high &gt;= 127; } private IntegerCache() {} } 分析 首先，从Javadoc中看出这个类是用来实现缓存的。它定义了三个静态参数，缓存数组cache,数组最小值low，赋值为-128以及数组最大值high，最大值映射到了“java.lang.Integer.IntegerCache.high”上。 ，并支持 -128 到 127 之间的自动装箱过程。最大值 127 可以通过 JVM 的启动参数 -XX:AutoBoxCacheMax=size 修改。 修改jvm参数后 ​ 运行结果 ​ a与b相同 c与d不相同 结论IntegerCache这个Integer私有静态类代表Integer缓存，它在被首次主动使用时，会被初始化，static代码块中的会被执行，通过一个 for 循环创建出一个值为-128~127的一个缓存数组cache，以后，如果创建的值在low和high之间，就可以使用缓存中包含的实例对象，而不是创建一个新的实例(在自动装箱的情况下)。这种机制使我们可以根据应用程序的实际情况灵活地调整来提高性能。是什么原因选择这个 -128 到 127 这个范围呢？因为这个范围的整数值是使用最广泛的，通过使用共享对象，就可以节省内存空间了。在程序中第一次使用 Integer 的时候也需要一定的额外时间来初始化这个缓存。这种机制在其他包装类中也有类似的实现。这种缓存策略也是一种设计模式，叫做享元模式。]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>容器类</tag>
        <tag>缓存机制</tag>
      </tags>
  </entry>
</search>
